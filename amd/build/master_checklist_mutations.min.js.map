{"version":3,"file":"master_checklist_mutations.min.js","sources":["../src/master_checklist_mutations.js"],"sourcesContent":["import Ajax from 'core/ajax';\n\nexport default class {\n    masterChecklistStateEvent(stateManager, data) {\n        const state = stateManager.state;\n        // window.console.log('state master checklist state event');\n        // window.console.log(data);\n        // window.console.log(state);\n    }\n\n    reOrderCategoryItems(stateManager, data) {\n        const state = stateManager.state;\n        window.console.log('reorder category items');\n        window.console.log(data);\n\n        stateManager.setReadOnly(false);\n\n        // Check if parentId and targetParentId are different\n        if (data.parentId !== data.targetParentId) {\n            // Handle moving item between different categories\n            const sourceCategory = state.checklistcategories.get(data.parentId);\n            const targetCategory = state.checklistcategories.get(data.targetParentId);\n\n            // Initialize source category items array if needed\n            if (!sourceCategory.items || !Array.isArray(sourceCategory.items)) {\n                sourceCategory.items = [];\n            }\n\n            // Initialize target category items array if needed\n            if (!targetCategory.items || !Array.isArray(targetCategory.items)) {\n                targetCategory.items = [];\n            }\n\n            const idToMove = data.id;\n            const targetId = data.targetId;\n\n            // Remove the item from the source category\n            sourceCategory.items = sourceCategory.items.filter(item => item !== idToMove);\n\n            // Add the item to the target category if it doesn't already exist\n            const targetItems = [...targetCategory.items];\n            const existingTargetIndex = targetItems.indexOf(idToMove);\n\n            // Only add if the item doesn't already exist in target array\n            if (existingTargetIndex === -1) {\n                const targetIndex = targetItems.indexOf(targetId);\n\n                if (targetIndex !== -1) {\n                    // Insert after the target ID\n                    targetItems.splice(targetIndex + 1, 0, idToMove);\n                } else {\n                    // If target ID not found, add to the end\n                    targetItems.push(idToMove);\n                }\n            }\n\n            targetCategory.items = targetItems;\n\n            window.console.log('New source category items:', sourceCategory.items);\n            window.console.log('New target category items:', targetCategory.items);\n        } else {\n            // Same category - original logic for reordering within a category\n            const category = state.checklistcategories.get(data.targetParentId);\n\n            window.console.log('category items order: ', category.items);\n\n            // Initialize items array if it doesn't exist or isn't iterable\n            if (!category.items || !Array.isArray(category.items)) {\n                category.items = [];\n            }\n\n            const currentItems = [...category.items];\n            const idToMove = data.id;\n            const targetId = data.targetId;\n\n            const currentIndex = currentItems.indexOf(idToMove);\n\n            // If the ID to move is not found in the array, add it at the end\n            if (currentIndex === -1) {\n                currentItems.push(idToMove);\n            }\n\n            // After possible addition, check if target exists\n            const targetIndex = currentItems.indexOf(targetId);\n\n            if (targetIndex !== -1 && currentIndex !== -1) {\n                // Remove the element to move\n                currentItems.splice(currentIndex, 1);\n\n                // Find the new target index (might have shifted if the item was removed before target)\n                const newTargetIndex = currentItems.indexOf(targetId);\n\n                // Insert the element after the target\n                currentItems.splice(newTargetIndex + 1, 0, idToMove);\n            } else if (currentIndex !== -1) {\n                // targetId doesn't exist but idToMove does - keep the current position\n                // No changes needed\n            }\n\n            // Update the items array\n            category.items = currentItems;\n\n            window.console.log('new category items order: ', category.items);\n        }\n\n        stateManager.setReadOnly(true);\n    }\n\n    checklistitemCreated(stateManager, data) {\n        const state = stateManager.state;\n        window.console.log('checklist item created');\n        window.console.log(data);\n        stateManager.processUpdates(data);\n    }\n}"],"names":["masterChecklistStateEvent","stateManager","data","state","reOrderCategoryItems","window","console","log","setReadOnly","parentId","targetParentId","sourceCategory","checklistcategories","get","targetCategory","items","Array","isArray","idToMove","id","targetId","filter","item","targetItems","indexOf","targetIndex","splice","push","category","currentItems","currentIndex","newTargetIndex","checklistitemCreated","processUpdates"],"mappings":"2QAGIA,0BAA0BC,aAAcC,MACtBD,aAAaE,MAM/BC,qBAAqBH,aAAcC,YACzBC,MAAQF,aAAaE,SAC3BE,OAAOC,QAAQC,IAAI,0BACnBF,OAAOC,QAAQC,IAAIL,MAEnBD,aAAaO,aAAY,GAGrBN,KAAKO,WAAaP,KAAKQ,eAAgB,OAEjCC,eAAiBR,MAAMS,oBAAoBC,IAAIX,KAAKO,UACpDK,eAAiBX,MAAMS,oBAAoBC,IAAIX,KAAKQ,gBAGrDC,eAAeI,OAAUC,MAAMC,QAAQN,eAAeI,SACvDJ,eAAeI,MAAQ,IAItBD,eAAeC,OAAUC,MAAMC,QAAQH,eAAeC,SACvDD,eAAeC,MAAQ,UAGrBG,SAAWhB,KAAKiB,GAChBC,SAAWlB,KAAKkB,SAGtBT,eAAeI,MAAQJ,eAAeI,MAAMM,QAAOC,MAAQA,OAASJ,iBAG9DK,YAAc,IAAIT,eAAeC,WAIV,IAHDQ,YAAYC,QAAQN,UAGhB,OACtBO,YAAcF,YAAYC,QAAQJ,WAEnB,IAAjBK,YAEAF,YAAYG,OAAOD,YAAc,EAAG,EAAGP,UAGvCK,YAAYI,KAAKT,UAIzBJ,eAAeC,MAAQQ,YAEvBlB,OAAOC,QAAQC,IAAI,6BAA8BI,eAAeI,OAChEV,OAAOC,QAAQC,IAAI,6BAA8BO,eAAeC,WAC7D,OAEGa,SAAWzB,MAAMS,oBAAoBC,IAAIX,KAAKQ,gBAEpDL,OAAOC,QAAQC,IAAI,yBAA0BqB,SAASb,OAGjDa,SAASb,OAAUC,MAAMC,QAAQW,SAASb,SAC3Ca,SAASb,MAAQ,UAGfc,aAAe,IAAID,SAASb,OAC5BG,SAAWhB,KAAKiB,GAChBC,SAAWlB,KAAKkB,SAEhBU,aAAeD,aAAaL,QAAQN,WAGpB,IAAlBY,cACAD,aAAaF,KAAKT,cAMD,IAFDW,aAAaL,QAAQJ,YAEG,IAAlBU,aAAqB,CAE3CD,aAAaH,OAAOI,aAAc,SAG5BC,eAAiBF,aAAaL,QAAQJ,UAG5CS,aAAaH,OAAOK,eAAiB,EAAG,EAAGb,UAO/CU,SAASb,MAAQc,aAEjBxB,OAAOC,QAAQC,IAAI,6BAA8BqB,SAASb,OAG9Dd,aAAaO,aAAY,GAG7BwB,qBAAqB/B,aAAcC,MACjBD,aAAaE,MAC3BE,OAAOC,QAAQC,IAAI,0BACnBF,OAAOC,QAAQC,IAAIL,MACnBD,aAAagC,eAAe/B"}