{"version":3,"file":"master_checklist_mutations.min.js","sources":["../src/master_checklist_mutations.js"],"sourcesContent":["import Ajax from 'core/ajax';\n\nexport default class {\n    masterChecklistStateEvent(stateManager, data) {\n        // const state = stateManager.state;\n        // window.console.log('state master checklist state event');\n        // window.console.log(data);\n        // window.console.log(state);\n    }\n\n    reOrderCategoryItems(stateManager, data) {\n        const state = stateManager.state;\n        window.console.log('reorder category items');\n        window.console.log(data);\n\n        stateManager.setReadOnly(false);\n\n        // Check if parentId and targetParentId are different\n        if (data.parentId !== data.targetParentId) {\n            // Handle moving item between different categories\n            const sourceCategory = state.checklistcategories.get(data.parentId);\n            const targetCategory = state.checklistcategories.get(data.targetParentId);\n\n            // Initialize source category items array if needed\n            if (!sourceCategory.items || !Array.isArray(sourceCategory.items)) {\n                sourceCategory.items = [];\n            }\n\n            // Initialize target category items array if needed\n            if (!targetCategory.items || !Array.isArray(targetCategory.items)) {\n                targetCategory.items = [];\n            }\n\n            const idToMove = parseInt(data.id);\n            const targetId = parseInt(data.targetId);\n\n            // Remove the item from the source category\n            sourceCategory.items = sourceCategory.items.filter(item => item !== idToMove);\n\n            // Add the item to the target category if it doesn't already exist\n            const targetItems = [...targetCategory.items];\n            const existingTargetIndex = targetItems.indexOf(idToMove);\n\n            // Only add if the item doesn't already exist in target array\n            if (existingTargetIndex === -1) {\n                const targetIndex = targetItems.indexOf(targetId);\n\n                if (targetIndex !== -1) {\n                    // Insert after the target ID\n                    targetItems.splice(targetIndex + 1, 0, idToMove);\n                } else {\n                    // If target ID not found, add to the end\n                    targetItems.push(idToMove);\n                }\n            }\n\n            targetCategory.items = targetItems;\n\n            const targetItem = state.checklistitems.get(idToMove);\n\n            targetItem.categoryid = parseInt(targetCategory.id);\n\n            window.console.log('New source category items:', sourceCategory.items);\n            window.console.log('New target category items:', targetCategory.items);\n        } else {\n            // Same category - original logic for reordering within a category\n            const category = state.checklistcategories.get(data.targetParentId);\n\n            window.console.log('category items order: ', category.items);\n\n            // Initialize items array if it doesn't exist or isn't iterable\n            if (!category.items || !Array.isArray(category.items)) {\n                category.items = [];\n            }\n\n            const currentItems = [...category.items];\n            const idToMove = parseInt(data.id);\n            const targetId = parseInt(data.targetId);\n\n            const currentIndex = currentItems.indexOf(idToMove);\n\n            // If the ID to move is not found in the array, add it at the end\n            if (currentIndex === -1) {\n                currentItems.push(idToMove);\n            }\n\n            // After possible addition, check if target exists\n            const targetIndex = currentItems.indexOf(targetId);\n\n            if (targetIndex !== -1 && currentIndex !== -1) {\n                // Remove the element to move\n                currentItems.splice(currentIndex, 1);\n\n                // Find the new target index (might have shifted if the item was removed before target)\n                const newTargetIndex = currentItems.indexOf(targetId);\n\n                // Insert the element after the target\n                currentItems.splice(newTargetIndex + 1, 0, idToMove);\n            } else if (currentIndex !== -1) {\n                // targetId doesn't exist but idToMove does - keep the current position\n                // No changes needed\n            }\n\n            // Update the items array\n            category.items = currentItems;\n\n            window.console.log('new category items order: ', category.items);\n        }\n\n        stateManager.setReadOnly(true);\n    }\n\n    reOrderCategories(stateManager, data) {\n        const state = stateManager.state;\n        window.console.log('reorder categories');\n        window.console.log(data);\n\n        // stateManager.setReadOnly(false);\n\n        // Find the master checklist we're working with\n        const masterChecklist = state.masterchecklists.get(1);\n        if (!masterChecklist) {\n            window.console.error('Master checklist not found');\n            stateManager.setReadOnly(true);\n            return;\n        }\n\n        // Get the current category order\n        let categoryOrder = masterChecklist.mastercategoryorder ?\n            masterChecklist.mastercategoryorder.split(',').map(id => parseInt(id)) : [];\n\n        // Find the category to move and the target category\n        const idToMove = parseInt(data.id);\n        const targetId = parseInt(data.targetId);\n\n        // Remove the category to move from its current position\n        categoryOrder = categoryOrder.filter(id => id !== idToMove);\n\n        // Find the target index\n        const targetIndex = categoryOrder.indexOf(targetId);\n\n        if (targetIndex !== -1) {\n            // Insert after the target category\n            categoryOrder.splice(targetIndex + 1, 0, idToMove);\n        } else {\n            // If target not found, add to the end\n            categoryOrder.push(idToMove);\n        }\n\n        const updatedCategoryOrder =  categoryOrder.join(',');\n\n        const formDataObj = {\n            id: data.parentId,\n            mastercategoryorder: updatedCategoryOrder,\n            action: 'put',\n            _qf__mod_bookit_form_edit_checklist_master_form: 1,\n        };\n\n        const formData = new URLSearchParams(formDataObj).toString();\n\n        window.console.log('formData', formData);\n\n\n        Ajax.call([{\n            methodname: 'core_form_dynamic_form',\n            args: {\n                formdata: formData,\n                form: 'mod_bookit\\\\form\\\\edit_checklist_master_form'\n            }\n        }])[0]\n        .then((response) => {\n\n                    window.console.log('AJAX response received');\n                    window.console.log(response);\n                    window.console.log(JSON.parse(response.data));\n                    stateManager.processUpdates(JSON.parse(response.data));\n\n            })\n            .catch(exception => {\n                window.console.error('AJAX error:', exception);\n\n            });\n\n        // Update the master checklist with the new order\n        // masterChecklist.mastercategoryorder = updatedCategoryOrder;\n\n        window.console.log('New category order:', masterChecklist.mastercategoryorder);\n\n        // stateManager.setReadOnly(true);\n    }\n\n    checklistitemCreated(stateManager, data) {\n        const state = stateManager.state;\n        window.console.log('checklist item created');\n        window.console.log(data);\n        window.console.log(data[0]);\n        window.console.log(data[0].fields);\n        window.console.log(data[0].fields.category);\n        stateManager.processUpdates(data);\n\n        stateManager.setReadOnly(false);\n        const category = state.checklistcategories.get(data[0].fields.category);\n        const currentItems = [...category.items];\n        currentItems.push(data[0].fields.id);\n        category.items = currentItems;\n        stateManager.setReadOnly(true);\n\n    }\n\n    checklistitemDeleted(stateManager, data) {\n        const state = stateManager.state;\n        window.console.log('checklist item deleted');\n        window.console.log(data);\n\n        stateManager.setReadOnly(false);\n\n        const category = state.checklistcategories.get(data.categoryid);\n\n        window.console.log('category items before deletion: ', category.items);\n\n        const currentItems = [...category.items];\n        const itemIndex = currentItems.indexOf(data.id);\n\n        window.console.log('item index to delete: ', itemIndex);\n\n        if (itemIndex !== -1) {\n            window.console.log('item found in category items - removing');\n            currentItems.splice(itemIndex, 1);\n            category.items = currentItems;\n        }\n        window.console.log('category items after deletion: ', category.items);\n\n        stateManager.setReadOnly(true);\n    }\n\n}"],"names":["masterChecklistStateEvent","stateManager","data","reOrderCategoryItems","state","window","console","log","setReadOnly","parentId","targetParentId","sourceCategory","checklistcategories","get","targetCategory","items","Array","isArray","idToMove","parseInt","id","targetId","filter","item","targetItems","indexOf","targetIndex","splice","push","checklistitems","categoryid","category","currentItems","currentIndex","newTargetIndex","reOrderCategories","masterChecklist","masterchecklists","error","categoryOrder","mastercategoryorder","split","map","updatedCategoryOrder","join","formDataObj","action","_qf__mod_bookit_form_edit_checklist_master_form","formData","URLSearchParams","toString","call","methodname","args","formdata","form","then","response","JSON","parse","processUpdates","catch","exception","checklistitemCreated","fields","checklistitemDeleted","itemIndex"],"mappings":"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"}