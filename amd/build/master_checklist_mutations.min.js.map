{"version":3,"file":"master_checklist_mutations.min.js","sources":["../src/master_checklist_mutations.js"],"sourcesContent":["import Ajax from 'core/ajax';\n\nexport default class {\n    masterChecklistStateEvent(stateManager, data) {\n\n    }\n\n    _callDynamicForm(stateManager, data, processUpdates = true) {\n        const type = data.formType;\n        data.formData[`_qf__mod_bookit_form_edit_checklist_${type}_form`] = 1;\n        const formData = new URLSearchParams(data.formData).toString();\n\n        Ajax.call([{\n            methodname: 'core_form_dynamic_form',\n            args: {\n                formdata: formData,\n                form: `mod_bookit\\\\form\\\\edit_checklist_${type}_form`\n            }\n        }])[0]\n        .then((response) => {\n            if (processUpdates) {\n                stateManager.processUpdates(JSON.parse(response.data));\n            }\n        })\n        .catch(exception => {\n            window.console.error('AJAX error:', exception);\n        });\n\n    }\n\n    reOrderCategoryItems(stateManager, data) {\n        const state = stateManager.state;\n\n        stateManager.setReadOnly(false);\n\n        if (data.parentId !== data.targetParentId) {\n            const sourceCategory = state.checklistcategories.get(data.parentId);\n            const targetCategory = state.checklistcategories.get(data.targetParentId);\n\n            if (!sourceCategory.items || !Array.isArray(sourceCategory.items)) {\n                sourceCategory.items = [];\n            }\n\n            if (!targetCategory.items || !Array.isArray(targetCategory.items)) {\n                targetCategory.items = [];\n            }\n\n            const idToMove = parseInt(data.id);\n            const targetId = parseInt(data.targetId);\n\n            sourceCategory.items = sourceCategory.items.filter(item => item !== idToMove);\n\n            const targetItems = [...targetCategory.items];\n            const existingTargetIndex = targetItems.indexOf(idToMove);\n\n            if (existingTargetIndex === -1) {\n                const targetIndex = targetItems.indexOf(targetId);\n\n                if (targetIndex !== -1) {\n                    targetItems.splice(targetIndex + 1, 0, idToMove);\n                } else {\n                    targetItems.push(idToMove);\n                }\n            }\n\n            targetCategory.items = targetItems;\n\n            const targetItem = state.checklistitems.get(idToMove);\n\n            targetItem.categoryid = parseInt(targetCategory.id);\n\n        } else {\n            const category = state.checklistcategories.get(data.targetParentId);\n\n            if (!category.items || !Array.isArray(category.items)) {\n                category.items = [];\n            }\n\n            const currentItems = [...category.items];\n            const idToMove = parseInt(data.id);\n            const targetId = parseInt(data.targetId);\n\n            const currentIndex = currentItems.indexOf(idToMove);\n\n            if (currentIndex === -1) {\n                currentItems.push(idToMove);\n            }\n\n            const targetIndex = currentItems.indexOf(targetId);\n\n            if (targetIndex !== -1 && currentIndex !== -1) {\n                currentItems.splice(currentIndex, 1);\n\n                const newTargetIndex = currentItems.indexOf(targetId);\n\n                currentItems.splice(newTargetIndex + 1, 0, idToMove);\n            } else if (currentIndex !== -1) {\n            }\n\n            category.items = currentItems;\n\n        }\n\n        stateManager.setReadOnly(true);\n\n        const categoriesToUpdate = [];\n\n        categoriesToUpdate.push(data.targetParentId);\n\n        if (data.parentId !== data.targetParentId) {\n            categoriesToUpdate.push(data.parentId);\n        }\n\n        categoriesToUpdate.forEach(categoryId => {\n            const category = stateManager.state.checklistcategories.get(categoryId);\n            const formDataObj = {\n                id: category.id,\n                masterid: 1,\n                name: category.name,\n                checklistitems: category.items,\n                action: 'put',\n            };\n\n            const mutationData = {\n                formData: formDataObj,\n                formType: 'category'\n            };\n\n            this._callDynamicForm(stateManager, mutationData, false);\n        });\n    }\n\n    reOrderCategories(stateManager, data) {\n        const state = stateManager.state;\n\n        const masterChecklist = state.masterchecklists.get(1);\n        if (!masterChecklist) {\n            window.console.error('Master checklist not found');\n            stateManager.setReadOnly(true);\n            return;\n        }\n\n        let categoryOrder = masterChecklist.mastercategoryorder ?\n            masterChecklist.mastercategoryorder.split(',').map(id => parseInt(id)) : [];\n\n        const idToMove = parseInt(data.id);\n        const targetId = parseInt(data.targetId);\n\n        categoryOrder = categoryOrder.filter(id => id !== idToMove);\n\n        const targetIndex = categoryOrder.indexOf(targetId);\n\n        if (targetIndex !== -1) {\n            categoryOrder.splice(targetIndex + 1, 0, idToMove);\n        } else {\n            categoryOrder.push(idToMove);\n        }\n\n        const updatedCategoryOrder =  categoryOrder.join(',');\n\n        const formDataObj = {\n            id: data.parentId,\n            mastercategoryorder: updatedCategoryOrder,\n            action: 'put',\n        };\n\n        data.formData = formDataObj;\n        data.formType = 'master';\n\n        this._callDynamicForm(stateManager, data);\n    }\n\n    checklistitemCreated(stateManager, data) {\n        const state = stateManager.state;\n\n        stateManager.processUpdates(data);\n\n        stateManager.setReadOnly(false);\n        const category = state.checklistcategories.get(data[0].fields.category);\n        const currentItems = [...category.items];\n        currentItems.push(data[0].fields.id);\n        category.items = currentItems;\n        stateManager.setReadOnly(true);\n\n    }\n\n    checklistitemDeleted(stateManager, data) {\n        const state = stateManager.state;\n\n        stateManager.setReadOnly(false);\n\n        const category = state.checklistcategories.get(data.categoryid);\n\n        const currentItems = [...category.items];\n        const itemIndex = currentItems.indexOf(data.id);\n\n        if (itemIndex !== -1) {\n            window.console.log('item found in category items - removing');\n            currentItems.splice(itemIndex, 1);\n            category.items = currentItems;\n        }\n\n        stateManager.setReadOnly(true);\n    }\n\n    roomChanged(stateManager, data) {\n        const state = stateManager.state;\n\n        stateManager.setReadOnly(false);\n\n        state.activeRoom.id = parseInt(data.id);\n\n        stateManager.setReadOnly(true);\n    }\n\n    roleChanged(stateManager, data) {\n        const state = stateManager.state;\n\n        stateManager.setReadOnly(false);\n\n        state.activeRole.id = parseInt(data.id);\n\n        stateManager.setReadOnly(true);\n    }\n\n}"],"names":["masterChecklistStateEvent","stateManager","data","_callDynamicForm","processUpdates","type","formType","formData","URLSearchParams","toString","call","methodname","args","formdata","form","then","response","JSON","parse","catch","exception","window","console","error","reOrderCategoryItems","state","setReadOnly","parentId","targetParentId","sourceCategory","checklistcategories","get","targetCategory","items","Array","isArray","idToMove","parseInt","id","targetId","filter","item","targetItems","indexOf","targetIndex","splice","push","checklistitems","categoryid","category","currentItems","currentIndex","newTargetIndex","categoriesToUpdate","forEach","categoryId","mutationData","masterid","name","action","reOrderCategories","masterChecklist","masterchecklists","categoryOrder","mastercategoryorder","split","map","updatedCategoryOrder","join","formDataObj","checklistitemCreated","fields","checklistitemDeleted","itemIndex","log","roomChanged","activeRoom","roleChanged","activeRole"],"mappings":"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"}