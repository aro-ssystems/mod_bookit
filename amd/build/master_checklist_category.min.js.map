{"version":3,"file":"master_checklist_category.min.js","sources":["../src/master_checklist_category.js"],"sourcesContent":["import { BaseComponent, DragDrop } from 'core/reactive';\nimport { masterChecklistReactiveInstance } from 'mod_bookit/master_checklist_reactive';\nimport { SELECTORS } from 'mod_bookit/master_checklist_reactive';\nimport ModalForm from 'core_form/modalform';\nimport {getString} from 'core/str';\nimport ChecklistHelper from 'mod_bookit/checklist_helper';\n\nexport default class extends BaseComponent {\n\n    create(descriptor) {\n        this.helper = new ChecklistHelper();\n\n        const categoryEditBtnSelector = 'EDIT_CHECKLISTCATEGORY_BTN_' + descriptor.element.dataset.bookitCategoryId;\n\n        this.selectors[categoryEditBtnSelector] = `#edit-checklistcategory-${descriptor.element.dataset.bookitCategoryId}`;\n\n        const categoryTbodySelector = 'CATEGORY_TBODY_' + descriptor.element.dataset.bookitCategoryId;\n        this.selectors[categoryTbodySelector] = `#bookit-master-checklist-tbody-category-${descriptor.element.dataset.bookitCategoryId}`;\n    }\n\n    static init(target, selectors) {\n        return new this({\n            element: document.querySelector(target),\n            reactive: masterChecklistReactiveInstance,\n            selectors: selectors || SELECTORS,\n        });\n    }\n\n    getWatchers() {\n        return [\n            {watch: 'checklistcategories.name:updated', handler: this._refreshEditButtonListener},\n            {watch: 'activeRole:updated', handler: this._handleFilterUpdate},\n            {watch: 'activeRoom:updated', handler: this._handleFilterUpdate},\n            {watch: 'checklistitems:created', handler: this._handleFilterUpdate},\n            {watch: 'checklistitems.roomids:updated', handler: this._handleFilterUpdate},\n            {watch: 'checklistitems.roleids:updated', handler: this._handleFilterUpdate},\n\n            // item rooms and roles watchers\n        ];\n    }\n\n    stateReady(state) {\n\n        this.dragdrop = new DragDrop(this);\n\n        const categoryEditBtnSelector = 'EDIT_CHECKLISTCATEGORY_BTN_' + this.element.dataset.bookitCategoryId;\n\n        this.addEventListener(this.getElement(this.selectors[categoryEditBtnSelector]), 'click', (e) => {\n            e.preventDefault();\n            window.console.log('EDIT CHECKLIST CATEGORY BUTTON CLICKED', e.currentTarget);\n            this._handleEditChecklistCategoryButtonClick(e);\n        });\n\n        document.addEventListener('mod_bookit:master_checklist_category_rendered', (e) => {\n\n            this._refreshEditButtonListener(e);\n        }, true);\n    }\n\n    destroy() {\n        if (this.dragdrop !== undefined) {\n            this.dragdrop.unregister();\n        }\n    }\n\n    validateDropData(dropdata) {\n        return true;\n    }\n\n    async _handleEditChecklistCategoryButtonClick(event) {\n        const modalForm = new ModalForm({\n            formClass: 'mod_bookit\\\\form\\\\edit_checklist_category_form',\n            moduleName: 'mod_bookit/modal_delete_save_cancel',\n            args: {\n                id: this.element.dataset.bookitCategoryId,\n                masterid: 1,\n                checklistitems: JSON.stringify(this.reactive.state.checklistcategories.get(this.element.dataset.bookitCategoryId).items),\n            },\n            modalConfig: {\n                title: await getString('checklistcategory', 'mod_bookit'),\n            },\n        })\n\n        modalForm.addEventListener(modalForm.events.FORM_SUBMITTED, (response) => {\n            this.reactive.stateManager.processUpdates(response.detail);\n        });\n\n        modalForm.addEventListener(modalForm.events.LOADED, (response) => {\n\n            const deleteButton = modalForm.modal.getRoot().find('button[data-action=\"delete\"]');\n\n            deleteButton.on('click', (e) => {\n                modalForm.getFormNode().querySelector('input[name=\"action\"]').value = 'delete';\n                modalForm.submitFormAjax();\n            });\n        });\n\n        modalForm.show();\n    };\n\n    _refreshEditButtonListener(event) {\n        this.removeAllEventListeners();\n\n        const categoryEditBtnSelector = 'EDIT_CHECKLISTCATEGORY_BTN_' + this.element.dataset.bookitCategoryId;\n\n        this.addEventListener(this.getElement(this.selectors[categoryEditBtnSelector]), 'click', (e) => {\n            e.preventDefault();\n            this._handleEditChecklistCategoryButtonClick(e);\n        });\n    }\n\n    drop(dropdata, event) {\n        switch (dropdata.type) {\n            case 'item':\n                this._handleItemDrop(dropdata, event);\n                break;\n            case 'category':\n                this._handleCategoryDrop(dropdata, event);\n                break;\n            default:\n                throw new Error(`Unknown drop type: ${dropdata.type}`);\n        }\n    }\n\n    showDropZone(dropdata, event) {\n        const root = document.querySelector('html');\n        const primaryColor = getComputedStyle(root).getPropertyValue('--primary');\n\n        this.element.style.boxShadow = `0px -5px 0px 0px ${primaryColor} inset`;\n        this.element.style.transition = 'box-shadow 0.1s ease';\n    }\n\n    hideDropZone(dropdata, event) {\n        this.element.style.boxShadow = '';\n        this.element.style.backgroundBlendMode = '';\n        this.element.style.transition = '';\n    }\n\n    _handleItemDrop(dropdata, event) {\n\n        const categoryObject = this.reactive.state.checklistcategories.get(this.element.dataset.bookitCategoryId);\n\n        const categoryObjectItems = [...categoryObject.items];\n\n        const lastItemId = categoryObjectItems[categoryObjectItems.length - 1];\n\n        dropdata.targetId = parseInt(lastItemId);\n        dropdata.targetParentId = parseInt(this.element.dataset.bookitCategoryId);\n\n        this.reactive.dispatch('reOrderCategoryItems', dropdata);\n\n        const itemObject = this.reactive.state.checklistitems.get(dropdata.id);\n\n        const itemElement = document.getElementById(`bookit-master-checklist-item-${itemObject.id}`);\n\n        const itemHasChangedParent = dropdata.parentId !== dropdata.targetParentId;\n\n        if (itemHasChangedParent) {\n            itemElement.dataset.bookitChecklistitemCategoryid = dropdata.targetParentId;\n        }\n\n        this.element.append(itemElement);\n    }\n\n\n    _handleCategoryDrop(dropdata, event) {\n\n        dropdata.targetId = parseInt(this.element.dataset.bookitCategoryId);\n        dropdata.targetParentId = parseInt(this.element.dataset.bookitCategoryMasterid);\n\n        this.reactive.dispatch('reOrderCategories', dropdata);\n\n        const categoryObject = this.reactive.state.checklistcategories.get(dropdata.id);\n\n        const categoryElement = document.getElementById(`bookit-master-checklist-tbody-category-${categoryObject.id}`);\n\n        const tableElement = document.querySelector(this.selectors.TABLE);\n\n        tableElement.insertBefore(categoryElement, this.element.nextElementSibling);\n\n    }\n\n     _handleFilterUpdate(event) {\n        const components = this.reactive.components;\n        const results = this.helper.findComponents(components, {\n            dataset: {bookitChecklistitemCategoryid: this.element.dataset.bookitCategoryId},\n            onlyFirst: false\n        });\n\n        var hasVisibleItems = false;\n        results.forEach((component, index) => {\n            const itemIsVisible = component.shouldBeVisible();\n            if (itemIsVisible) {\n                hasVisibleItems = true;\n            }\n        });\n\n        if (!hasVisibleItems) {\n            this.element.classList.add('d-none');\n        } else {\n            this.element.classList.remove('d-none');\n        }\n\n    }\n\n}"],"names":["BaseComponent","create","descriptor","helper","ChecklistHelper","categoryEditBtnSelector","element","dataset","bookitCategoryId","selectors","categoryTbodySelector","target","this","document","querySelector","reactive","masterChecklistReactiveInstance","SELECTORS","getWatchers","watch","handler","_refreshEditButtonListener","_handleFilterUpdate","stateReady","state","dragdrop","DragDrop","addEventListener","getElement","e","preventDefault","window","console","log","currentTarget","_handleEditChecklistCategoryButtonClick","destroy","undefined","unregister","validateDropData","dropdata","event","modalForm","ModalForm","formClass","moduleName","args","id","masterid","checklistitems","JSON","stringify","checklistcategories","get","items","modalConfig","title","events","FORM_SUBMITTED","response","stateManager","processUpdates","detail","LOADED","modal","getRoot","find","on","getFormNode","value","submitFormAjax","show","removeAllEventListeners","drop","type","_handleItemDrop","_handleCategoryDrop","Error","showDropZone","root","primaryColor","getComputedStyle","getPropertyValue","style","boxShadow","transition","hideDropZone","backgroundBlendMode","categoryObjectItems","lastItemId","length","targetId","parseInt","targetParentId","dispatch","itemObject","itemElement","getElementById","parentId","bookitChecklistitemCategoryid","append","bookitCategoryMasterid","categoryObject","categoryElement","TABLE","insertBefore","nextElementSibling","components","results","findComponents","onlyFirst","hasVisibleItems","forEach","component","index","shouldBeVisible","classList","remove","add"],"mappings":"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"}