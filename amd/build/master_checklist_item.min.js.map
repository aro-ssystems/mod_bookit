{"version":3,"file":"master_checklist_item.min.js","sources":["../src/master_checklist_item.js"],"sourcesContent":["import { BaseComponent, DragDrop } from 'core/reactive';\nimport { masterChecklistReactiveInstance } from 'mod_bookit/master_checklist_reactive';\nimport { SELECTORS } from 'mod_bookit/master_checklist_reactive';\nimport ModalForm from 'core_form/modalform';\nimport { getString } from 'core/str';\nimport Templates from 'core/templates';\nimport Notification from 'core/notification';\n\nexport default class extends BaseComponent {\n\n    static MODAL_TIMEOUT_MS = 500;\n\n    create(descriptor) {\n\n        const itemEditBtnSelector = 'EDIT_CHECKLISTITEM_BTN_' + descriptor.element.dataset.bookitChecklistitemId;\n        this.selectors[itemEditBtnSelector] = `#edit-checklistitem-${descriptor.element.dataset.bookitChecklistitemId}`;\n    }\n\n    static init(target, selectors) {\n        return new this({\n            element: document.querySelector(target),\n            reactive: masterChecklistReactiveInstance,\n            selectors: selectors || SELECTORS,\n        });\n    }\n\n    getWatchers() {\n        return [];\n    }\n\n    stateReady(state) {\n\n        this.dragdrop = new DragDrop(this);\n\n        const itemEditBtnSelector = 'EDIT_CHECKLISTITEM_BTN_' + this.element.dataset.bookitChecklistitemId;\n\n        this.addEventListener(this.getElement(this.selectors[itemEditBtnSelector]), 'click', (e) => {\n            e.preventDefault();\n            this._handleEditChecklistItemButtonClick(e);\n        });\n\n        this.shouldBeVisible();\n\n    }\n\n    destroy() {\n        if (this.dragdrop !== undefined) {\n            this.dragdrop.unregister();\n        }\n    }\n\n    validateDropData(dropdata) {\n        return true;\n    }\n\n    drop(dropdata, event) {\n        switch (dropdata.type) {\n            case 'item':\n                this._handleItemDrop(dropdata, event);\n                break;\n            case 'category':\n                this._handleCategoryDrop(dropdata, event);\n                break;\n            default:\n                throw new Error(`Unknown drop type: ${dropdata.type}`);\n        }\n    }\n\n\n    showDropZone(dropdata, event) {\n\n        const root = document.querySelector('html');\n        const primaryColor = getComputedStyle(root).getPropertyValue('--primary');\n\n        switch (dropdata.type) {\n            case 'item':\n            this.element.style.boxShadow = `0px -5px 0px 0px ${primaryColor} inset`;\n            this.element.style.transition = 'box-shadow 0.1s ease';\n                break;\n            case 'category':\n                const itemParentId = parseInt(this.element.dataset.bookitChecklistitemCategoryid);\n                const categoryParentElement = document.getElementById(`bookit-master-checklist-tbody-category-${itemParentId}`);\n                var isActive = parseInt(categoryParentElement.dataset.bookitCategoryActive || 0);\n                if (!isActive) {\n                    categoryParentElement.dataset.bookitCategoryActive = 1;\n                }\n                const categoryLastChild = categoryParentElement.lastElementChild;\n                setTimeout(() => {\n                    categoryParentElement.dataset.bookitCategoryActive = 0;\n                }, 5);\n                categoryLastChild.style.boxShadow = `0px -5px 0px 0px ${primaryColor} inset`;\n                categoryLastChild.style.transition = 'box-shadow 0.1s ease';\n                break;\n            default:\n                throw new Error(`Unknown drop type: ${dropdata.type}`);\n        }\n\n    }\n\n    hideDropZone(dropdata, event) {\n\n        switch (dropdata.type) {\n            case 'item':\n                this.element.style.boxShadow = '';\n                this.element.style.transition = '';\n                break;\n            case 'category':\n                const itemParentId = parseInt(this.element.dataset.bookitChecklistitemCategoryid);\n                const categoryParentElement = document.getElementById(`bookit-master-checklist-tbody-category-${itemParentId}`);\n                const categoryLastChild = categoryParentElement.lastElementChild;\n                var isActive = parseInt(categoryParentElement.dataset.bookitCategoryActive || 0);\n                if (!isActive) {\n                    categoryLastChild.style.boxShadow = '';\n                    categoryLastChild.style.transition = '';\n                }\n                break;\n            default:\n                throw new Error(`Unknown drop type: ${dropdata.type}`);\n        }\n\n    }\n\n    _handleItemDrop(dropdata, event) {\n        dropdata.targetId = parseInt(this.element.dataset.bookitChecklistitemId);\n        dropdata.targetParentId = parseInt(this.element.dataset.bookitChecklistitemCategoryid);\n\n        this.reactive.dispatch('reOrderCategoryItems', dropdata);\n\n        const itemObject = this.reactive.state.checklistitems.get(dropdata.id);\n\n        const itemElement = document.getElementById(`bookit-master-checklist-item-${itemObject.id}`);\n\n        const itemHasChangedParent = dropdata.parentId !== dropdata.targetParentId;\n\n        if (itemHasChangedParent) {\n            itemElement.dataset.bookitChecklistitemCategoryid = dropdata.targetParentId;\n        }\n\n        this.element.parentNode.insertBefore(itemElement, this.element.nextElementSibling);\n    }\n\n\n    _handleCategoryDrop(dropdata, event) {\n        const categoryElement = document.getElementById(`bookit-master-checklist-tbody-category-${dropdata.id}`);\n\n        dropdata.targetId = this.element.dataset.bookitChecklistitemCategoryid;\n        dropdata.targetParentId = categoryElement.dataset.bookitCategoryMasterid;\n\n        this.reactive.dispatch('reOrderCategories', dropdata);\n\n        const tableElement = document.querySelector(this.selectors.TABLE);\n\n        categoryElement.dataset.bookitCategoryActive = 1;\n\n        this.hideDropZone(dropdata, event);\n\n        tableElement.insertBefore(categoryElement, this.element.parentNode.nextElementSibling);\n    }\n\n\n    async _handleEditChecklistItemButtonClick(event) {\n        const modalForm = new ModalForm({\n            formClass: \"mod_bookit\\\\form\\\\edit_checklistitem_form\",\n            moduleName: 'mod_bookit/modal_delete_save_cancel',\n            args: {\n                masterid: 1,\n                itemid: event.currentTarget.value,\n                categories: Array.from(this.reactive.state.checklistcategories.values()),\n            },\n            modalConfig: {\n                title: await getString('checklistitem', 'mod_bookit'),\n            },\n\n        });\n\n        modalForm.addEventListener(modalForm.events.FORM_SUBMITTED, (response) => {\n            this.reactive.stateManager.processUpdates(response.detail);\n\n            if (response.detail[0].action === 'delete') {\n                this.reactive.dispatch('checklistitemDeleted',\n                    {\n                        id: parseInt(response.detail[0].fields.id),\n                        categoryid: parseInt(this.element.dataset.bookitChecklistitemCategoryid),\n                    });\n                this.remove();\n                return;\n            }\n\n            const parentId = parseInt(this.element.dataset.bookitChecklistitemCategoryid);\n\n            const updatedParentId = parseInt(response.detail[0].fields.categoryid);\n\n            if (parentId !== updatedParentId) {\n\n                const targetParentCategoryObject = this.reactive.state.checklistcategories.get(response.detail[0].fields.categoryid);\n\n                const copiedArray = [...targetParentCategoryObject.items];\n\n                const lastItemOfParentCategoryId = copiedArray.pop();\n\n                const data = {\n                    id: parseInt(this.element.dataset.bookitChecklistitemId),\n                    type: 'item',\n                    parentId: parentId,\n                    targetId: lastItemOfParentCategoryId,\n                    targetParentId: updatedParentId,\n                }\n\n                this.reactive.dispatch('reOrderCategoryItems', data);\n\n                this.element.dataset.bookitChecklistitemCategoryid = data.targetParentId;\n\n                const targetParentElement = document.getElementById(`bookit-master-checklist-tbody-category-${data.targetParentId}`);\n\n                targetParentElement.append(this.element);\n            }\n\n\n        });\n\n        modalForm.addEventListener(modalForm.events.LOADED, (response) => {\n            const deleteButton = modalForm.modal.getRoot().find('button[data-action=\"delete\"]');\n\n            deleteButton.on('click', (e) => {\n\n                modalForm.getFormNode().querySelector('input[name=\"action\"]').value = 'delete';\n                modalForm.submitFormAjax();\n\n            });\n\n            setTimeout(() => {\n                this._addResetButtonsToNotificationEditors(modalForm);\n            }, this.constructor.MODAL_TIMEOUT_MS);\n\n            setTimeout(() => {\n                this._addRequiredIconsToNotificationFields(modalForm);\n            }, this.constructor.MODAL_TIMEOUT_MS);\n\n        });\n\n        modalForm.addEventListener(modalForm.events.SERVER_VALIDATION_ERROR, (response) => {\n            setTimeout(() => {\n                this._addResetButtonsToNotificationEditors(modalForm);\n                this._addRequiredIconsToNotificationFields(modalForm);\n            }, this.constructor.MODAL_TIMEOUT_MS);\n        });\n\n        modalForm.show();\n    }\n\n    /**\n     * Add required icons to notification fields\n     * @param {ModalForm} modalForm The modal form instance\n     */\n    _addRequiredIconsToNotificationFields(modalForm) {\n        const notificationTypes = ['before_due', 'when_due', 'overdue', 'when_done'];\n\n        notificationTypes.forEach(type => {\n            // Handle recipient element\n            const recipientElement = modalForm.getFormNode().querySelector(`[id^=\"fitem_id_${type}_recipient_\"]`);\n            if (recipientElement) {\n                const firstDiv = recipientElement.firstElementChild;\n                if (firstDiv) {\n                    const formLabelAddon = firstDiv.querySelector('.form-label-addon');\n                    if (formLabelAddon && formLabelAddon.firstElementChild) {\n                        const anchorElement = formLabelAddon.firstElementChild;\n                        this._addRequiredIcon(anchorElement, type, 'recipient');\n                    }\n                }\n            }\n\n            // Handle time element\n            const timeElement = modalForm.getFormNode().querySelector(`[id^=\"fitem_id_${type}_time_\"]`);\n            if (timeElement) {\n                const firstDiv = timeElement.firstElementChild;\n                if (firstDiv) {\n                    const formLabelAddon = firstDiv.querySelector('.form-label-addon');\n                    if (formLabelAddon && formLabelAddon.firstElementChild) {\n                        const anchorElement = formLabelAddon.firstElementChild;\n                        this._addRequiredIcon(anchorElement, type, 'time');\n                    }\n                }\n            }\n\n            // Handle messagetext element\n            const messagetextElement = modalForm.getFormNode().querySelector(`[id^=\"fitem_id_${type}_messagetext_\"]`);\n            if (messagetextElement) {\n                const firstDiv = messagetextElement.firstElementChild;\n                if (firstDiv) {\n                    const formLabelAddon = firstDiv.querySelector('.form-label-addon');\n                    if (formLabelAddon && formLabelAddon.firstElementChild) {\n                        const anchorElement = formLabelAddon.firstElementChild;\n                        this._addRequiredIcon(anchorElement, type, 'messagetext');\n                    }\n                }\n            }\n        });\n    }\n\n    /**\n     * Helper method to add required icon to an element\n     * @param {Element} anchorElement The anchor element to insert before\n     * @param {string} type The notification type\n     * @param {string} fieldType The field type (recipient, time, messagetext)\n     */\n    _addRequiredIcon(anchorElement, type, fieldType) {\n        Templates.renderForPromise('core/pix_icon_fontawesome', {\n            key: 'fa-circle-exclamation',\n            title: 'Required',\n            alt: 'Required field',\n            extraclasses: 'fa text-danger fa-fw',\n            'aria-hidden': false,\n            unmappedIcon: false\n        })\n        .then((result) => {\n            const iconHtml = result.html;\n            const requiredIconHtml = `<div class=\"text-danger\" title=\"Required\" aria-hidden=\"true\">${iconHtml}</div>`;\n            anchorElement.insertAdjacentHTML('beforebegin', requiredIconHtml);\n        })\n        .catch((error) => {\n            window.console.log(`Template error for ${type}_${fieldType}:`, error);\n        });\n    }\n\n    /**\n     * Add reset buttons to notification type message editors\n     * @param {ModalForm} modalForm The modal form instance\n     */\n    _addResetButtonsToNotificationEditors(modalForm) {\n        const notificationTypes = ['before_due', 'when_due', 'overdue', 'when_done'];\n\n        notificationTypes.forEach(type => {\n            const resetButton = modalForm.getFormNode().querySelector(`button[name=\"${type}_reset\"]`);\n\n            if (resetButton) {\n                resetButton.addEventListener('click', async (e) => {\n                    e.preventDefault();\n\n                    try {\n                        const confirmTitle = await getString('confirm', 'core');\n                        const confirmMessage = 'Are you sure you want to reset the message to the default template? Your changes will be deleted.';\n\n                        Notification.deleteCancel(\n                            confirmTitle,\n                            confirmMessage,\n                            await getString('reset', 'core'),\n                            async () => {\n                                await this._performReset(modalForm, type);\n                            },\n                            () => {\n                                // Cancel callback - do nothing\n                            }\n                        );\n\n                    } catch (error) {\n                        window.console.error('Error showing confirmation dialog:', error);\n                        // Fallback: ask with native confirm\n                        if (confirm('Are you sure you want to reset the message to the default template? Your changes will be deleted.')) {\n                            await this._performReset(modalForm, type);\n                        }\n                    }\n                });\n            }\n        });\n    }\n\n    /**\n     * Helper method to perform the reset operation\n     * @param {ModalForm} modalForm The modal form instance\n     * @param {string} type The notification type\n     */\n    async _performReset(modalForm, type) {\n        window.console.log(`Resetting ${type} message to default`);\n\n        const defaultMessage = await getString('customtemplatedefaultmessage_' + type, 'mod_bookit');\n\n        const editorSelector = `[name=\"${type}_messagetext[text]\"]`;\n        const textarea = modalForm.getFormNode().querySelector(editorSelector);\n\n        if (textarea) {\n            textarea.value = defaultMessage;\n            textarea.dispatchEvent(new Event('input', { bubbles: true }));\n            textarea.dispatchEvent(new Event('change', { bubbles: true }));\n\n            if (window.M && window.M.editor_atto && textarea.id) {\n                const editorInstance = window.M.editor_atto.get(textarea.id);\n                if (editorInstance) {\n                    editorInstance.updateOriginal();\n                }\n            }\n        }\n\n        if (window.tinymce) {\n            const editorId = textarea?.id;\n            if (editorId) {\n                const editor = window.tinymce.get(editorId);\n                if (editor) {\n                    editor.setContent(defaultMessage);\n                    editor.save();\n                }\n            }\n        }\n    }\n\n    shouldBeVisible() {\n        const activeRoomId = this.reactive.state.activeRoom.id;\n        const activeRoleId = this.reactive.state.activeRole.id;\n        const itemId = parseInt(this.element.dataset.bookitChecklistitemId)\n        const stateItem = this.reactive.state.checklistitems.get(itemId);\n        const roomIds = stateItem.roomids;\n        const roleIds = stateItem.roleids;\n\n        var isInRoom = false;\n\n        if (activeRoomId == 0 || roomIds.includes(activeRoomId.toString())) {\n            isInRoom = true;\n        }\n\n        var hasRole = false;\n\n        if (activeRoleId == 0 || roleIds.includes(activeRoleId.toString())) {\n            hasRole = true;\n        }\n\n        const shouldBeVisible = isInRoom && hasRole;\n\n        if (!shouldBeVisible) {\n            this.element.classList.add('d-none');\n        } else {\n            this.element.classList.remove('d-none');\n        }\n\n        return shouldBeVisible;\n    }\n}"],"names":["BaseComponent","create","descriptor","itemEditBtnSelector","element","dataset","bookitChecklistitemId","selectors","target","this","document","querySelector","reactive","masterChecklistReactiveInstance","SELECTORS","getWatchers","stateReady","state","dragdrop","DragDrop","addEventListener","getElement","e","preventDefault","_handleEditChecklistItemButtonClick","shouldBeVisible","destroy","undefined","unregister","validateDropData","dropdata","drop","event","type","_handleItemDrop","_handleCategoryDrop","Error","showDropZone","root","primaryColor","getComputedStyle","getPropertyValue","style","boxShadow","transition","itemParentId","parseInt","bookitChecklistitemCategoryid","categoryParentElement","getElementById","bookitCategoryActive","categoryLastChild","lastElementChild","setTimeout","hideDropZone","targetId","targetParentId","dispatch","itemObject","checklistitems","get","id","itemElement","parentId","parentNode","insertBefore","nextElementSibling","categoryElement","bookitCategoryMasterid","tableElement","TABLE","modalForm","ModalForm","formClass","moduleName","args","masterid","itemid","currentTarget","value","categories","Array","from","checklistcategories","values","modalConfig","title","events","FORM_SUBMITTED","response","stateManager","processUpdates","detail","action","fields","categoryid","remove","updatedParentId","lastItemOfParentCategoryId","items","pop","data","append","LOADED","modal","getRoot","find","on","getFormNode","submitFormAjax","_addResetButtonsToNotificationEditors","constructor","MODAL_TIMEOUT_MS","_addRequiredIconsToNotificationFields","SERVER_VALIDATION_ERROR","show","forEach","recipientElement","firstDiv","firstElementChild","formLabelAddon","anchorElement","_addRequiredIcon","timeElement","messagetextElement","fieldType","renderForPromise","key","alt","extraclasses","unmappedIcon","then","result","iconHtml","html","requiredIconHtml","insertAdjacentHTML","catch","error","window","console","log","resetButton","async","confirmTitle","confirmMessage","deleteCancel","_performReset","confirm","defaultMessage","editorSelector","textarea","dispatchEvent","Event","bubbles","M","editor_atto","editorInstance","updateOriginal","tinymce","editorId","editor","setContent","save","activeRoomId","activeRoom","activeRoleId","activeRole","itemId","stateItem","roomIds","roomids","roleIds","roleids","isInRoom","includes","toString","hasRole","classList","add"],"mappings":"4lBAQ6BA,wBAIzBC,OAAOC,kBAEGC,oBAAsB,0BAA4BD,WAAWE,QAAQC,QAAQC,2BAC9EC,UAAUJ,mDAA8CD,WAAWE,QAAQC,QAAQC,mCAGhFE,OAAQD,kBACT,IAAIE,KAAK,CACZL,QAASM,SAASC,cAAcH,QAChCI,SAAUC,2DACVN,UAAWA,WAAaO,uCAIhCC,oBACW,GAGXC,WAAWC,YAEFC,SAAW,IAAIC,mBAASV,YAEvBN,oBAAsB,0BAA4BM,KAAKL,QAAQC,QAAQC,2BAExEc,iBAAiBX,KAAKY,WAAWZ,KAAKF,UAAUJ,sBAAuB,SAAUmB,IAClFA,EAAEC,sBACGC,oCAAoCF,WAGxCG,kBAITC,eAC0BC,IAAlBlB,KAAKS,eACAA,SAASU,aAItBC,iBAAiBC,iBACN,EAGXC,KAAKD,SAAUE,cACHF,SAASG,UACR,YACIC,gBAAgBJ,SAAUE,iBAE9B,gBACIG,oBAAoBL,SAAUE,2BAG7B,IAAII,mCAA4BN,SAASG,QAK3DI,aAAaP,SAAUE,aAEbM,KAAO5B,SAASC,cAAc,QAC9B4B,aAAeC,iBAAiBF,MAAMG,iBAAiB,oBAErDX,SAASG,UACR,YACA7B,QAAQsC,MAAMC,qCAAgCJ,4BAC9CnC,QAAQsC,MAAME,WAAa,iCAE3B,iBACKC,aAAeC,SAASrC,KAAKL,QAAQC,QAAQ0C,+BAC7CC,sBAAwBtC,SAASuC,gEAAyDJ,eACjFC,SAASE,sBAAsB3C,QAAQ6C,sBAAwB,KAE1EF,sBAAsB3C,QAAQ6C,qBAAuB,SAEnDC,kBAAoBH,sBAAsBI,iBAChDC,YAAW,KACPL,sBAAsB3C,QAAQ6C,qBAAuB,IACtD,GACHC,kBAAkBT,MAAMC,qCAAgCJ,uBACxDY,kBAAkBT,MAAME,WAAa,2CAG/B,IAAIR,mCAA4BN,SAASG,QAK3DqB,aAAaxB,SAAUE,cAEXF,SAASG,UACR,YACI7B,QAAQsC,MAAMC,UAAY,QAC1BvC,QAAQsC,MAAME,WAAa,aAE/B,iBACKC,aAAeC,SAASrC,KAAKL,QAAQC,QAAQ0C,+BAC7CC,sBAAwBtC,SAASuC,gEAAyDJ,eAC1FM,kBAAoBH,sBAAsBI,iBACjCN,SAASE,sBAAsB3C,QAAQ6C,sBAAwB,KAE1EC,kBAAkBT,MAAMC,UAAY,GACpCQ,kBAAkBT,MAAME,WAAa,wBAInC,IAAIR,mCAA4BN,SAASG,QAK3DC,gBAAgBJ,SAAUE,OACtBF,SAASyB,SAAWT,SAASrC,KAAKL,QAAQC,QAAQC,uBAClDwB,SAAS0B,eAAiBV,SAASrC,KAAKL,QAAQC,QAAQ0C,oCAEnDnC,SAAS6C,SAAS,uBAAwB3B,gBAEzC4B,WAAajD,KAAKG,SAASK,MAAM0C,eAAeC,IAAI9B,SAAS+B,IAE7DC,YAAcpD,SAASuC,sDAA+CS,WAAWG,KAE1D/B,SAASiC,WAAajC,SAAS0B,iBAGxDM,YAAYzD,QAAQ0C,8BAAgCjB,SAAS0B,qBAG5DpD,QAAQ4D,WAAWC,aAAaH,YAAarD,KAAKL,QAAQ8D,oBAInE/B,oBAAoBL,SAAUE,aACpBmC,gBAAkBzD,SAASuC,gEAAyDnB,SAAS+B,KAEnG/B,SAASyB,SAAW9C,KAAKL,QAAQC,QAAQ0C,8BACzCjB,SAAS0B,eAAiBW,gBAAgB9D,QAAQ+D,4BAE7CxD,SAAS6C,SAAS,oBAAqB3B,gBAEtCuC,aAAe3D,SAASC,cAAcF,KAAKF,UAAU+D,OAE3DH,gBAAgB9D,QAAQ6C,qBAAuB,OAE1CI,aAAaxB,SAAUE,OAE5BqC,aAAaJ,aAAaE,gBAAiB1D,KAAKL,QAAQ4D,WAAWE,8DAI7BlC,aAChCuC,UAAY,IAAIC,mBAAU,CAC5BC,UAAW,4CACXC,WAAY,sCACZC,KAAM,CACFC,SAAU,EACVC,OAAQ7C,MAAM8C,cAAcC,MAC5BC,WAAYC,MAAMC,KAAKzE,KAAKG,SAASK,MAAMkE,oBAAoBC,WAEnEC,YAAa,CACTC,YAAa,kBAAU,gBAAiB,iBAKhDf,UAAUnD,iBAAiBmD,UAAUgB,OAAOC,gBAAiBC,mBACpD7E,SAAS8E,aAAaC,eAAeF,SAASG,QAEjB,WAA9BH,SAASG,OAAO,GAAGC,mBACdjF,SAAS6C,SAAS,uBACnB,CACII,GAAIf,SAAS2C,SAASG,OAAO,GAAGE,OAAOjC,IACvCkC,WAAYjD,SAASrC,KAAKL,QAAQC,QAAQ0C,2CAE7CiD,eAIHjC,SAAWjB,SAASrC,KAAKL,QAAQC,QAAQ0C,+BAEzCkD,gBAAkBnD,SAAS2C,SAASG,OAAO,GAAGE,OAAOC,eAEvDhC,WAAakC,gBAAiB,OAMxBC,2BAFc,IAFezF,KAAKG,SAASK,MAAMkE,oBAAoBvB,IAAI6B,SAASG,OAAO,GAAGE,OAAOC,YAEtDI,OAEJC,MAEzCC,KAAO,CACTxC,GAAIf,SAASrC,KAAKL,QAAQC,QAAQC,uBAClC2B,KAAM,OACN8B,SAAUA,SACVR,SAAU2C,2BACV1C,eAAgByC,sBAGfrF,SAAS6C,SAAS,uBAAwB4C,WAE1CjG,QAAQC,QAAQ0C,8BAAgCsD,KAAK7C,eAE9B9C,SAASuC,gEAAyDoD,KAAK7C,iBAE/E8C,OAAO7F,KAAKL,aAMxCmE,UAAUnD,iBAAiBmD,UAAUgB,OAAOgB,QAASd,WAC5BlB,UAAUiC,MAAMC,UAAUC,KAAK,gCAEvCC,GAAG,SAAUrF,IAEtBiD,UAAUqC,cAAcjG,cAAc,wBAAwBoE,MAAQ,SACtER,UAAUsC,oBAIdxD,YAAW,UACFyD,sCAAsCvC,aAC5C9D,KAAKsG,YAAYC,kBAEpB3D,YAAW,UACF4D,sCAAsC1C,aAC5C9D,KAAKsG,YAAYC,qBAIxBzC,UAAUnD,iBAAiBmD,UAAUgB,OAAO2B,yBAA0BzB,WAClEpC,YAAW,UACFyD,sCAAsCvC,gBACtC0C,sCAAsC1C,aAC5C9D,KAAKsG,YAAYC,qBAGxBzC,UAAU4C,OAOdF,sCAAsC1C,WACR,CAAC,aAAc,WAAY,UAAW,aAE9C6C,SAAQnF,aAEhBoF,iBAAmB9C,UAAUqC,cAAcjG,uCAAgCsB,0BAC7EoF,iBAAkB,OACZC,SAAWD,iBAAiBE,qBAC9BD,SAAU,OACJE,eAAiBF,SAAS3G,cAAc,wBAC1C6G,gBAAkBA,eAAeD,kBAAmB,OAC9CE,cAAgBD,eAAeD,uBAChCG,iBAAiBD,cAAexF,KAAM,qBAMjD0F,YAAcpD,UAAUqC,cAAcjG,uCAAgCsB,qBACxE0F,YAAa,OACPL,SAAWK,YAAYJ,qBACzBD,SAAU,OACJE,eAAiBF,SAAS3G,cAAc,wBAC1C6G,gBAAkBA,eAAeD,kBAAmB,OAC9CE,cAAgBD,eAAeD,uBAChCG,iBAAiBD,cAAexF,KAAM,gBAMjD2F,mBAAqBrD,UAAUqC,cAAcjG,uCAAgCsB,4BAC/E2F,mBAAoB,OACdN,SAAWM,mBAAmBL,qBAChCD,SAAU,OACJE,eAAiBF,SAAS3G,cAAc,wBAC1C6G,gBAAkBA,eAAeD,kBAAmB,OAC9CE,cAAgBD,eAAeD,uBAChCG,iBAAiBD,cAAexF,KAAM,qBAa/DyF,iBAAiBD,cAAexF,KAAM4F,8BACxBC,iBAAiB,4BAA6B,CACpDC,IAAK,wBACLzC,MAAO,WACP0C,IAAK,iBACLC,aAAc,sCACC,EACfC,cAAc,IAEjBC,MAAMC,eACGC,SAAWD,OAAOE,KAClBC,wFAAmFF,mBACzFZ,cAAce,mBAAmB,cAAeD,qBAEnDE,OAAOC,QACJC,OAAOC,QAAQC,iCAA0B5G,iBAAQ4F,eAAca,UAQvE5B,sCAAsCvC,WACR,CAAC,aAAc,WAAY,UAAW,aAE9C6C,SAAQnF,aAChB6G,YAAcvE,UAAUqC,cAAcjG,qCAA8BsB,kBAEtE6G,aACAA,YAAY1H,iBAAiB,SAAS2H,MAAAA,IAClCzH,EAAEC,2BAGQyH,mBAAqB,kBAAU,UAAW,QAC1CC,eAAiB,0HAEVC,aACTF,aACAC,qBACM,kBAAU,QAAS,SACzBF,gBACUtI,KAAK0I,cAAc5E,UAAWtC,SAExC,SAKN,MAAOyG,OACLC,OAAOC,QAAQF,MAAM,qCAAsCA,OAEvDU,QAAQ,4GACF3I,KAAK0I,cAAc5E,UAAWtC,iCAaxCsC,UAAWtC,MAC3B0G,OAAOC,QAAQC,wBAAiB5G,mCAE1BoH,qBAAuB,kBAAU,gCAAkCpH,KAAM,cAEzEqH,gCAA2BrH,6BAC3BsH,SAAWhF,UAAUqC,cAAcjG,cAAc2I,mBAEnDC,WACAA,SAASxE,MAAQsE,eACjBE,SAASC,cAAc,IAAIC,MAAM,QAAS,CAAEC,SAAS,KACrDH,SAASC,cAAc,IAAIC,MAAM,SAAU,CAAEC,SAAS,KAElDf,OAAOgB,GAAKhB,OAAOgB,EAAEC,aAAeL,SAAS1F,IAAI,OAC3CgG,eAAiBlB,OAAOgB,EAAEC,YAAYhG,IAAI2F,SAAS1F,IACrDgG,gBACAA,eAAeC,oBAKvBnB,OAAOoB,QAAS,OACVC,SAAWT,MAAAA,gBAAAA,SAAU1F,MACvBmG,SAAU,OACJC,OAAStB,OAAOoB,QAAQnG,IAAIoG,UAC9BC,SACAA,OAAOC,WAAWb,gBAClBY,OAAOE,UAMvB1I,wBACU2I,aAAe3J,KAAKG,SAASK,MAAMoJ,WAAWxG,GAC9CyG,aAAe7J,KAAKG,SAASK,MAAMsJ,WAAW1G,GAC9C2G,OAAS1H,SAASrC,KAAKL,QAAQC,QAAQC,uBACvCmK,UAAYhK,KAAKG,SAASK,MAAM0C,eAAeC,IAAI4G,QACnDE,QAAUD,UAAUE,QACpBC,QAAUH,UAAUI,YAEtBC,UAAW,GAEK,GAAhBV,cAAqBM,QAAQK,SAASX,aAAaY,eACnDF,UAAW,OAGXG,SAAU,GAEM,GAAhBX,cAAqBM,QAAQG,SAAST,aAAaU,eACnDC,SAAU,SAGRxJ,gBAAkBqJ,UAAYG,eAE/BxJ,qBAGIrB,QAAQ8K,UAAUlF,OAAO,eAFzB5F,QAAQ8K,UAAUC,IAAI,UAKxB1J,wEAtae"}