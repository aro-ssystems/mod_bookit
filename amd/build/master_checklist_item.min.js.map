{"version":3,"file":"master_checklist_item.min.js","sources":["../src/master_checklist_item.js"],"sourcesContent":["import { BaseComponent, DragDrop } from 'core/reactive';\nimport { masterChecklistReactiveInstance } from 'mod_bookit/master_checklist_reactive';\nimport { SELECTORS } from 'mod_bookit/master_checklist_reactive';\nimport ModalForm from 'core_form/modalform';\nimport Templates from 'core/templates';\nimport { getString } from 'core/str';\nimport Ajax from 'core/ajax';\n\nexport default class extends BaseComponent {\n\n    create(descriptor) {\n\n        window.console.log('create item component: ' + descriptor.element.dataset.bookitChecklistitemTitle);\n\n        const itemEditBtnSelector = 'EDIT_CHECKLISTITEM_BTN_' + descriptor.element.dataset.bookitChecklistitemId;\n        this.selectors[itemEditBtnSelector] = `#edit-checklistitem-${descriptor.element.dataset.bookitChecklistitemId}`;\n\n        // const itemTitleSelector = 'ITEM_TITLE_' + descriptor.element.dataset.bookitChecklistitemId;\n        // this.selectors[itemTitleSelector] = `td[data-bookit-checklistitem-tabledata-title-id=\"${descriptor.element.dataset.bookitChecklistitemId}\"]`;\n\n        // const itemRoomSelector = 'ITEM_ROOM_' + descriptor.element.dataset.bookitChecklistitemId;\n        // this.selectors[itemRoomSelector] = `td[data-bookit-checklistitem-tabledata-roomid-id=\"${descriptor.element.dataset.bookitChecklistitemId}\"]`;\n\n        // const itemRoleSelector = 'ITEM_ROLE_' + descriptor.element.dataset.bookitChecklistitemId;\n        // this.selectors[itemRoleSelector] = `td[data-bookit-checklistitem-tabledata-roleid-id=\"${descriptor.element.dataset.bookitChecklistitemId}\"]`;\n\n    }\n\n    static init(target, selectors) {\n        return new this({\n            element: document.querySelector(target),\n            reactive: masterChecklistReactiveInstance,\n            selectors: selectors || SELECTORS,\n        });\n    }\n\n    getWatchers() {\n        // window.console.log('GET WATCHERS');\n        return [\n            // {watch: 'state:updated', handler: this._handleStateEvent},\n            // {watch: 'checklistcategories:created', handler: this._handleCategoryCreatedEvent},\n        ];\n    }\n\n    stateReady(state) {\n\n        // this.relativeDrag = true;\n\n        this.dragdrop = new DragDrop(this);\n\n        // window.console.log('state ready');\n        // window.console.log(state);\n\n        // const name = state.masterchecklists.get(1).name;\n\n        // window.console.log(this.selectors.MASTER_CHECKLIST_TITLE);\n        // window.console.log(this.selectors);\n\n        const itemEditBtnSelector = 'EDIT_CHECKLISTITEM_BTN_' + this.element.dataset.bookitChecklistitemId;\n\n        this.addEventListener(this.getElement(this.selectors[itemEditBtnSelector]), 'click', (e) => {\n            e.preventDefault();\n            window.console.log('EDIT CHECKLIST ITEM BUTTON CLICKED', e.currentTarget);\n            this._handleEditChecklistItemButtonClick(e);\n        });\n\n        // this.addEventListener(this.getElement('button[data-action=\"delete\"]'), 'click', (e) => {\n        //         e.preventDefault();\n        //         window.console.log('DELETE CHECKLIST ITEM BUTTON CLICKED', e.currentTarget);\n        //     });\n\n    }\n\n    destroy() {\n        if (this.dragdrop !== undefined) {\n            this.dragdrop.unregister();\n        }\n    }\n\n    validateDropData(dropdata) {\n\n        return true;\n    }\n\n    drop(dropdata, event) {\n        switch (dropdata.type) {\n            case 'item':\n                this._handleItemDrop(dropdata, event);\n                break;\n            case 'category':\n                this._handleCategoryDrop(dropdata, event);\n                break;\n            default:\n                throw new Error(`Unknown drop type: ${dropdata.type}`);\n        }\n    }\n\n\n    showDropZone(dropdata, event) {\n\n        window.console.log('show drop zone');\n        window.console.log(dropdata);\n        window.console.log(event);\n        const root = document.querySelector('html');\n        const primaryColor = getComputedStyle(root).getPropertyValue('--primary');\n\n        switch (dropdata.type) {\n            case 'item':\n            this.element.style.boxShadow = `0px -5px 0px 0px ${primaryColor} inset`;\n            this.element.style.transition = 'box-shadow 0.1s ease';\n                break;\n            case 'category':\n                const itemParentId = parseInt(this.element.dataset.bookitChecklistitemCategoryid);\n                const categoryParentElement = document.getElementById(`bookit-master-checklist-tbody-category-${itemParentId}`);\n                var isActive = parseInt(categoryParentElement.dataset.bookitCategoryActive || 0);\n                if (!isActive) {\n                    categoryParentElement.dataset.bookitCategoryActive = 1;\n                }\n                const categoryLastChild = categoryParentElement.lastElementChild;\n                setTimeout(() => {\n                    categoryParentElement.dataset.bookitCategoryActive = 0;\n                    // categoryLastChild.style.boxShadow = `0px -5px 0px 0px ${primaryColor} inset`;\n                    // categoryLastChild.style.transition = 'box-shadow 0.1s ease';\n                }, 5);\n                categoryLastChild.style.boxShadow = `0px -5px 0px 0px ${primaryColor} inset`;\n                categoryLastChild.style.transition = 'box-shadow 0.1s ease';\n                break;\n            default:\n                throw new Error(`Unknown drop type: ${dropdata.type}`);\n        }\n\n    }\n\n    hideDropZone(dropdata, event) {\n\n        window.console.log('hide drop zone');\n        window.console.log(dropdata);\n        window.console.log(event);\n\n        switch (dropdata.type) {\n            case 'item':\n                this.element.style.boxShadow = '';\n                this.element.style.transition = '';\n                break;\n            case 'category':\n                const itemParentId = parseInt(this.element.dataset.bookitChecklistitemCategoryid);\n                const categoryParentElement = document.getElementById(`bookit-master-checklist-tbody-category-${itemParentId}`);\n                const categoryLastChild = categoryParentElement.lastElementChild;\n                var isActive = parseInt(categoryParentElement.dataset.bookitCategoryActive || 0);\n                if (!isActive) {\n                    categoryLastChild.style.boxShadow = '';\n                    categoryLastChild.style.transition = '';\n                }\n                break;\n            default:\n                throw new Error(`Unknown drop type: ${dropdata.type}`);\n        }\n\n    }\n\n    _handleItemDrop(dropdata, event) {\n        window.console.log('handle item drop on item');\n        window.console.log(event);\n\n        dropdata.targetId = parseInt(this.element.dataset.bookitChecklistitemId);\n        dropdata.targetParentId = parseInt(this.element.dataset.bookitChecklistitemCategoryid);\n        window.console.log(`whoops you dropped an ${dropdata.type} on an item`, dropdata);\n\n        this.reactive.dispatch('reOrderCategoryItems', dropdata);\n\n        const itemObject = this.reactive.state.checklistitems.get(dropdata.id);\n\n        const itemElement = document.getElementById(`bookit-master-checklist-item-${itemObject.id}`);\n\n        const itemHasChangedParent = dropdata.parentId !== dropdata.targetParentId;\n\n        if (itemHasChangedParent) {\n            itemElement.dataset.bookitChecklistitemCategoryid = dropdata.targetParentId;\n        }\n\n        this.element.parentNode.insertBefore(itemElement, this.element.nextElementSibling);\n    }\n\n\n    _handleCategoryDrop(dropdata, event) {\n        window.console.log('handle category drop on item');\n        window.console.log(dropdata);\n        window.console.log(event);\n\n        const categoryElement = document.getElementById(`bookit-master-checklist-tbody-category-${dropdata.id}`);\n\n        dropdata.targetId = this.element.dataset.bookitChecklistitemCategoryid;\n        dropdata.targetParentId = categoryElement.dataset.bookitCategoryMasterid;\n        window.console.log(`whoops you dropped an ${dropdata.type} on an item`, dropdata);\n\n        this.reactive.dispatch('reOrderCategories', dropdata);\n\n        // const categoryElement = document.getElementById(`bookit-master-checklist-tbody-category-${dropdata.id}`);\n\n        const tableElement = document.querySelector(this.selectors.TABLE);\n\n        categoryElement.dataset.bookitCategoryActive = 1;\n\n        this.hideDropZone(dropdata, event);\n\n        // tableElement.append(categoryElement);\n        tableElement.insertBefore(categoryElement, this.element.parentNode.nextElementSibling);\n\n        // const categoryObject = this.reactive.state.checklistcategories.get(dropdata.id);\n\n        // const categoryElement = document.getElementById(`bookit-master-checklist-tbody-category-${categoryObject.id}`);\n\n        // this.element.parentNode.append(categoryElement);\n    }\n\n    // getDraggableData() {\n    //     return {id: 35, name: \"Something\"};\n    // }\n\n    // dragStart(dragData, event) {\n    //     // This method is called when the drag operation starts.\n    //     window.console.log('Drag started', dragData);\n    // }\n\n    // dragEnd(dragData, event) {\n    //     // This method is called when the drag operation ends.\n    //     window.console.log('Drag ended', dragData);\n    // }\n\n    // _handleStateEvent(event) {\n    //     window.console.log('handle state event');\n    // }\n\n    async _handleEditChecklistItemButtonClick(event) {\n        window.console.log('handle edit checklist item button click');\n        window.console.log(event);\n        const modalForm = new ModalForm({\n            formClass: \"mod_bookit\\\\form\\\\edit_checklistitem_form\",\n            moduleName: 'mod_bookit/modal_delete_save_cancel',\n            args: {\n                masterid: 1,\n                itemid: event.currentTarget.value,\n                categories: Array.from(this.reactive.state.checklistcategories.values()),\n            },\n            modalConfig: {\n                title: await getString('checklistitem', 'mod_bookit'),\n            },\n\n        });\n\n        modalForm.addEventListener(modalForm.events.FORM_SUBMITTED, (response) => {\n            window.console.log('EDIT ITEM FORM SUBMITTED - RESPONSE:');\n            window.console.log(response);\n            // TODO handle response\n            // this.reactive.stateManager.processUpdates(response.detail);\n            this.reactive.stateManager.processUpdates(response.detail);\n\n            // TODO if delete, skip rest but trigger db update for cat\n\n            if (response.detail[0].action === 'delete') {\n                window.console.log('item deleted - removing & unregistering');\n                this.reactive.dispatch('checklistitemDeleted',\n                    {\n                        id: parseInt(response.detail[0].fields.id),\n                        categoryid: parseInt(this.element.dataset.bookitChecklistitemCategoryid),\n                    });\n                this.remove();\n                return;\n            }\n\n            const parentId = parseInt(this.element.dataset.bookitChecklistitemCategoryid);\n\n            const updatedParentId = parseInt(response.detail[0].fields.categoryid);\n\n            if (parentId !== updatedParentId) {\n\n                const targetParentCategoryObject = this.reactive.state.checklistcategories.get(response.detail[0].fields.categoryid);\n\n                window.console.log(\"TARGET PARENT ITEMS\", targetParentCategoryObject.items);\n\n                const copiedArray = [...targetParentCategoryObject.items];\n\n                const lastItemOfParentCategoryId = copiedArray.pop();\n\n                const data = {\n                    id: parseInt(this.element.dataset.bookitChecklistitemId),\n                    type: 'item',\n                    parentId: parentId,\n                    targetId: lastItemOfParentCategoryId,\n                    targetParentId: updatedParentId,\n                }\n\n                window.console.log('item has changed parent - DISPATCHING REORDER EVENT');\n                window.console.log('data for reOrderCategoryItems ind item edit btn handler', data);\n                this.reactive.dispatch('reOrderCategoryItems', data);\n\n                // const itemObject = this.reactive.state.checklistitems.get(data.id);\n\n                this.element.dataset.bookitChecklistitemCategoryid = data.targetParentId;\n\n                const targetParentElement = document.getElementById(`bookit-master-checklist-tbody-category-${data.targetParentId}`);\n\n                targetParentElement.append(this.element);\n            }\n\n\n        });\n\n        modalForm.addEventListener(modalForm.events.LOADED, (response) => {\n            window.console.log('FORM LOADED');\n            window.console.log(response);\n            const deleteButton = modalForm.modal.getRoot().find('button[data-action=\"delete\"]');\n\n            window.console.log('DELETE BUTTON', deleteButton);\n\n            deleteButton.on('click', (e) => {\n\n                window.console.log('DELETE CHECKLIST ITEM BUTTON CLICKED', e.currentTarget);\n                window.console.log('DELETE ITEM ' + this.element.dataset.bookitChecklistitemId);\n\n                modalForm.getFormNode().querySelector('input[name=\"action\"]').value = 'delete';\n                modalForm.submitFormAjax();\n                // TODO delete function\n            });\n        });\n\n        // modalForm.show();\n        modalForm.show();\n\n    }\n\n\n    // _handleCategoryCreatedEvent(event) {\n    //     window.console.log('handle category created event');\n    //     window.console.log(event.element);\n\n    //     // TODO cats and/or items should be own components\n\n    //     Templates.renderForPromise('mod_bookit/bookit_checklist_category',\n    //         {\n    //             id: event.element.id,\n    //             name: event.element.name,\n    //             order: event.element.order\n    //         })\n    //         .then(({html, js}) => {\n    //             // Templates.appendNodeContents(this.getElement(this.selectors.TABLE_BODY), html, js);\n    //             Templates.appendNodeContents(this.getElement(this.selectors.TABLE), html, js);\n    //         })\n    //         .catch();\n    // }\n\n}"],"names":["BaseComponent","create","descriptor","window","console","log","element","dataset","bookitChecklistitemTitle","itemEditBtnSelector","bookitChecklistitemId","selectors","target","this","document","querySelector","reactive","masterChecklistReactiveInstance","SELECTORS","getWatchers","stateReady","state","dragdrop","DragDrop","addEventListener","getElement","e","preventDefault","currentTarget","_handleEditChecklistItemButtonClick","destroy","undefined","unregister","validateDropData","dropdata","drop","event","type","_handleItemDrop","_handleCategoryDrop","Error","showDropZone","root","primaryColor","getComputedStyle","getPropertyValue","style","boxShadow","transition","itemParentId","parseInt","bookitChecklistitemCategoryid","categoryParentElement","getElementById","bookitCategoryActive","categoryLastChild","lastElementChild","setTimeout","hideDropZone","targetId","targetParentId","dispatch","itemObject","checklistitems","get","id","itemElement","parentId","parentNode","insertBefore","nextElementSibling","categoryElement","bookitCategoryMasterid","tableElement","TABLE","modalForm","ModalForm","formClass","moduleName","args","masterid","itemid","value","categories","Array","from","checklistcategories","values","modalConfig","title","events","FORM_SUBMITTED","response","stateManager","processUpdates","detail","action","fields","categoryid","remove","updatedParentId","targetParentCategoryObject","items","lastItemOfParentCategoryId","pop","data","append","LOADED","deleteButton","modal","getRoot","find","on","getFormNode","submitFormAjax","show"],"mappings":"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"}