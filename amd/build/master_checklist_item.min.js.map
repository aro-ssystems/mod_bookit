{"version":3,"file":"master_checklist_item.min.js","sources":["../src/master_checklist_item.js"],"sourcesContent":["import {BaseComponent, DragDrop} from 'core/reactive';\nimport { masterChecklistReactiveInstance } from 'mod_bookit/master_checklist_reactive';\nimport { SELECTORS } from 'mod_bookit/master_checklist_reactive';\nimport ModalForm from 'core_form/modalform';\nimport Templates from 'core/templates';\nimport {getString} from 'core/str';\nimport Ajax from 'core/ajax';\n\nexport default class extends BaseComponent {\n\n    create(descriptor) {\n\n        window.console.log('create item component: ' + descriptor.element.dataset.bookitChecklistitemTitle);\n\n        const itemEditBtnSelector = 'EDIT_CHECKLISTITEM_BTN_' + descriptor.element.dataset.bookitChecklistitemId;\n\n        this.selectors[itemEditBtnSelector] = `#edit-checklistitem-${descriptor.element.dataset.bookitChecklistitemId}`;\n\n    }\n\n    static init(target, selectors) {\n        return new this({\n            element: document.querySelector(target),\n            reactive: masterChecklistReactiveInstance,\n            selectors: selectors || SELECTORS,\n        });\n    }\n\n    getWatchers() {\n        // window.console.log('GET WATCHERS');\n        return [\n            // {watch: 'state:updated', handler: this._handleStateEvent},\n            // {watch: 'checklistcategories:created', handler: this._handleCategoryCreatedEvent},\n        ];\n    }\n\n    stateReady(state) {\n\n        // this.relativeDrag = true;\n\n        this.dragdrop = new DragDrop(this);\n\n        // window.console.log('state ready');\n        // window.console.log(state);\n\n        // const name = state.masterchecklists.get(1).name;\n\n        // window.console.log(this.selectors.MASTER_CHECKLIST_TITLE);\n        // window.console.log(this.selectors);\n\n        const itemEditBtnSelector = 'EDIT_CHECKLISTITEM_BTN_' + this.element.dataset.bookitChecklistitemId;\n\n        this.addEventListener(this.getElement(this.selectors[itemEditBtnSelector]), 'click', (e) => {\n            e.preventDefault();\n            window.console.log('EDIT CHECKLIST ITEM BUTTON CLICKED', e.currentTarget);\n            this._handleEditChecklistItemButtonClick(e);\n        });\n\n        // this.addEventListener(this.getElement('button[data-action=\"delete\"]'), 'click', (e) => {\n        //         e.preventDefault();\n        //         window.console.log('DELETE CHECKLIST ITEM BUTTON CLICKED', e.currentTarget);\n        //     });\n\n    }\n\n    destroy() {\n        if (this.dragdrop !== undefined) {\n            this.dragdrop.unregister();\n        }\n    }\n\n    validateDropData(dropdata) {\n\n        return true;\n    }\n\n    drop(dropdata, event) {\n        dropdata.targetId = this.element.dataset.bookitChecklistitemId;\n        dropdata.targetParentId = this.element.dataset.bookitChecklistitemCategory;\n        window.console.log('whoops you dropped this on an item', dropdata);\n\n        // const itemObject = this.reactive.state.checklistitems.get(dropdata.id);\n\n        // const newEl = document.getElementById(`bookit-master-checklist-item-${itemObject.id}`);\n        // if (newEl) {\n\n        //     const itemHasChangedParent = dropdata.parentId !== dropdata.targetParentId;\n\n        //     window.console.log('item has changed parent: ', itemHasChangedParent);\n\n        //     this.element.parentNode.insertBefore(newEl, this.element.nextElementSibling);\n\n        //     const targetElement = document.getElementById(`bookit-master-checklist-tbody-category-${dropdata.targetParentId}`);\n\n        //     window.console.log('target element', targetElement);\n\n        //     const category = this.reactive.state.checklistcategories.get(dropdata.targetParentId);\n        //     window.console.log('category in _handleCategoryItemUpdatedEvent', category);\n\n        //     const formDataObj = {\n        //         id: category.id,\n        //         masterid: 1,\n        //         name: category.name,\n        //         checklistitems: category.items,\n        //         action: 'put',\n        //         _qf__mod_bookit_form_edit_checklist_category_form: 1,\n        //     };\n\n        //     const formData = new URLSearchParams(formDataObj).toString();\n\n        //     window.console.log('formData', formData);\n\n\n        //     Ajax.call([{\n        //         methodname: 'core_form_dynamic_form',\n        //         args: {\n        //             formdata: formData,\n        //             form: 'mod_bookit\\\\form\\\\edit_checklist_category_form'\n        //         }\n        //     }])[0]\n        //     .then((response) => {\n\n        //         window.console.log('AJAX response received');\n        //         window.console.log(response);\n\n        //         if (itemHasChangedParent) {\n\n        //             // TODO call category update\n\n        //             const formDataObj = {\n        //                 itemid: dropdata.id,\n        //                 masterid: 1,\n        //                 title: itemObject.title,\n        //                 categoryid: category.id,\n        //                 roomid: itemObject.roomid,\n        //                 roleid: itemObject.roleid,\n        //                 action: 'put',\n        //                 _qf__mod_bookit_form_edit_checklistitem_form: 1,\n        //             };\n\n        //             const formData = new URLSearchParams(formDataObj).toString();\n\n        //             window.console.log('formData ITEM', formData);\n\n\n        //             Ajax.call([{\n        //                 methodname: 'core_form_dynamic_form',\n        //                 args: {\n        //                     formdata: formData,\n        //                     form: 'mod_bookit\\\\form\\\\edit_checklistitem_form'\n        //                 }\n        //                 }])[0]\n        //                 .then((response) => {\n\n        //                     window.console.log('AJAX response received');\n        //                     window.console.log(response);\n\n        //                     })\n        //                     .catch(exception => {\n        //                         window.console.error('AJAX error:', exception);\n        //                     });\n\n\n        //         }\n\n        //         return null;\n        //     })\n        //     .catch(exception => {\n        //         window.console.error('AJAX error:', exception);\n        //     });\n\n\n\n        //     } else {\n        //     window.console.warn('New element not found after appending');\n        //     }\n\n        this.reactive.dispatch('reOrderCategoryItems', dropdata);\n\n        // Templates.renderForPromise('mod_bookit/bookit_checklist_item',\n        //         {\n        //             id: itemObject.id,\n        //             title: itemObject.title,\n        //             order: itemObject.order,\n        //             categoryid: dropdata.targetParentId,\n        //             roomid: itemObject.roomid,\n        //             roomname: itemObject.roomname,\n        //             roleid: itemObject.roleid,\n        //             rolename: itemObject.rolename,\n        //         })\n        //         .then(({html, js}) => {\n        //             // window.console.log('rendered item');\n        //             // window.console.log(html);\n        //             // window.console.log(js);\n        //             // this.getElement(`#bookit-master-checklist-item-${itemObject.id}`).remove();\n        //             this.reactive.dispatch('reOrderCategoryItems', dropdata);\n        //             // document.getElementById(`bookit-master-checklist-item-${dropdata.id}`).remove();\n        //             window.console.log('element: ', this.element);\n        //             window.console.log('element next sibling: ', this.element.nextElementSibling);\n        //             // Templates.appendNodeContents(this.element.parentNode, html, js);\n\n        //             // Step 2: Move the newly inserted element before the target\n        //             const newEl = document.getElementById(`bookit-master-checklist-item-${itemObject.id}`);\n        //             if (newEl) {\n        //                 this.element.parentNode.insertBefore(newEl, this.element.nextElementSibling);\n        //             } else {\n        //                 window.console.warn('New element not found after appending');\n        //             }\n        //         })\n        //         .then(async () => {\n        //             // Toast.add(await getString('checklistitemsuccess', 'mod_bookit'),\n        //             //     {type: 'success' });\n        //         })\n        //         .catch(error => {\n        //             window.console.error('Error rendering checklist item:', error);\n        //         });\n\n        // this.reactive.dispatch('reOrderCategoryItems', dropdata);\n\n        // document.getElementById(`bookit-master-checklist-item-${dropdata.id}`).remove();\n    }\n\n\n    showDropZone(dropdata, event) {\n        const root = document.querySelector('html');\n        const primaryColor = getComputedStyle(root).getPropertyValue('--primary');\n\n        window.console.log('primary color: ', primaryColor);\n\n        this.element.style.boxShadow = `0px -5px 0px 0px ${primaryColor} inset`;\n        this.element.style.transition = 'box-shadow 0.1s ease';\n    }\n\n    hideDropZone(dropdata, event) {\n        this.element.style.boxShadow = '';\n        this.element.style.backgroundBlendMode = '';\n        this.element.style.transition = '';\n    }\n\n    // getDraggableData() {\n    //     return {id: 35, name: \"Something\"};\n    // }\n\n    // dragStart(dragData, event) {\n    //     // This method is called when the drag operation starts.\n    //     window.console.log('Drag started', dragData);\n    // }\n\n    // dragEnd(dragData, event) {\n    //     // This method is called when the drag operation ends.\n    //     window.console.log('Drag ended', dragData);\n    // }\n\n    // _handleStateEvent(event) {\n    //     window.console.log('handle state event');\n    // }\n\n    async _handleEditChecklistItemButtonClick(event) {\n        window.console.log('handle edit checklist item button click');\n        window.console.log(event);\n        const modalForm = new ModalForm({\n            formClass: \"mod_bookit\\\\form\\\\edit_checklistitem_form\",\n            moduleName: 'mod_bookit/modal_delete_save_cancel',\n            args: {\n                masterid: 1,\n                itemid: event.currentTarget.value,\n                categories: Array.from(this.reactive.state.checklistcategories.values()),\n            },\n            modalConfig: {\n                title: await getString('checklistitem', 'mod_bookit'),\n            },\n\n        });\n\n        modalForm.addEventListener(modalForm.events.FORM_SUBMITTED, (response) => {\n            this.reactive.stateManager.processUpdates(response.detail);\n        });\n\n        modalForm.addEventListener(modalForm.events.LOADED, (response) => {\n            window.console.log('FORM LOADED');\n            window.console.log(response);\n            const deleteButton = modalForm.modal.getRoot().find('button[data-action=\"delete\"]');\n\n            window.console.log('DELETE BUTTON', deleteButton);\n\n            deleteButton.on('click', (e) => {\n\n                window.console.log('DELETE CHECKLIST ITEM BUTTON CLICKED', e.currentTarget);\n                window.console.log('DELETE ITEM ' + this.element.dataset.bookitChecklistitemId);\n\n                modalForm.getFormNode().querySelector('input[name=\"action\"]').value = 'delete';\n                modalForm.submitFormAjax();\n                // TODO delete function\n            });\n        });\n\n        // modalForm.show();\n        modalForm.show();\n\n    }\n\n\n    // _handleCategoryCreatedEvent(event) {\n    //     window.console.log('handle category created event');\n    //     window.console.log(event.element);\n\n    //     // TODO cats and/or items should be own components\n\n    //     Templates.renderForPromise('mod_bookit/bookit_checklist_category',\n    //         {\n    //             id: event.element.id,\n    //             name: event.element.name,\n    //             order: event.element.order\n    //         })\n    //         .then(({html, js}) => {\n    //             // Templates.appendNodeContents(this.getElement(this.selectors.TABLE_BODY), html, js);\n    //             Templates.appendNodeContents(this.getElement(this.selectors.TABLE), html, js);\n    //         })\n    //         .catch();\n    // }\n\n}"],"names":["BaseComponent","create","descriptor","window","console","log","element","dataset","bookitChecklistitemTitle","itemEditBtnSelector","bookitChecklistitemId","selectors","target","this","document","querySelector","reactive","masterChecklistReactiveInstance","SELECTORS","getWatchers","stateReady","state","dragdrop","DragDrop","addEventListener","getElement","e","preventDefault","currentTarget","_handleEditChecklistItemButtonClick","destroy","undefined","unregister","validateDropData","dropdata","drop","event","targetId","targetParentId","bookitChecklistitemCategory","dispatch","showDropZone","root","primaryColor","getComputedStyle","getPropertyValue","style","boxShadow","transition","hideDropZone","backgroundBlendMode","modalForm","ModalForm","formClass","moduleName","args","masterid","itemid","value","categories","Array","from","checklistcategories","values","modalConfig","title","events","FORM_SUBMITTED","response","stateManager","processUpdates","detail","LOADED","deleteButton","modal","getRoot","find","on","getFormNode","submitFormAjax","show"],"mappings":"8jBAQ6BA,wBAEzBC,OAAOC,YAEHC,OAAOC,QAAQC,IAAI,0BAA4BH,WAAWI,QAAQC,QAAQC,gCAEpEC,oBAAsB,0BAA4BP,WAAWI,QAAQC,QAAQG,2BAE9EC,UAAUF,mDAA8CP,WAAWI,QAAQC,QAAQG,mCAIhFE,OAAQD,kBACT,IAAIE,KAAK,CACZP,QAASQ,SAASC,cAAcH,QAChCI,SAAUC,2DACVN,UAAWA,WAAaO,uCAIhCC,oBAEW,GAMXC,WAAWC,YAIFC,SAAW,IAAIC,mBAASV,YAUvBJ,oBAAsB,0BAA4BI,KAAKP,QAAQC,QAAQG,2BAExEc,iBAAiBX,KAAKY,WAAWZ,KAAKF,UAAUF,sBAAuB,SAAUiB,IAClFA,EAAEC,iBACFxB,OAAOC,QAAQC,IAAI,qCAAsCqB,EAAEE,oBACtDC,oCAAoCH,MAUjDI,eAC0BC,IAAlBlB,KAAKS,eACAA,SAASU,aAItBC,iBAAiBC,iBAEN,EAGXC,KAAKD,SAAUE,OACXF,SAASG,SAAWxB,KAAKP,QAAQC,QAAQG,sBACzCwB,SAASI,eAAiBzB,KAAKP,QAAQC,QAAQgC,4BAC/CpC,OAAOC,QAAQC,IAAI,qCAAsC6B,eAkGpDlB,SAASwB,SAAS,uBAAwBN,UA8CnDO,aAAaP,SAAUE,aACbM,KAAO5B,SAASC,cAAc,QAC9B4B,aAAeC,iBAAiBF,MAAMG,iBAAiB,aAE7D1C,OAAOC,QAAQC,IAAI,kBAAmBsC,mBAEjCrC,QAAQwC,MAAMC,qCAAgCJ,4BAC9CrC,QAAQwC,MAAME,WAAa,uBAGpCC,aAAaf,SAAUE,YACd9B,QAAQwC,MAAMC,UAAY,QAC1BzC,QAAQwC,MAAMI,oBAAsB,QACpC5C,QAAQwC,MAAME,WAAa,6CAqBMZ,OACtCjC,OAAOC,QAAQC,IAAI,2CACnBF,OAAOC,QAAQC,IAAI+B,aACbe,UAAY,IAAIC,mBAAU,CAC5BC,UAAW,4CACXC,WAAY,sCACZC,KAAM,CACFC,SAAU,EACVC,OAAQrB,MAAMR,cAAc8B,MAC5BC,WAAYC,MAAMC,KAAKhD,KAAKG,SAASK,MAAMyC,oBAAoBC,WAEnEC,YAAa,CACTC,YAAa,kBAAU,gBAAiB,iBAKhDd,UAAU3B,iBAAiB2B,UAAUe,OAAOC,gBAAiBC,gBACpDpD,SAASqD,aAAaC,eAAeF,SAASG,WAGvDpB,UAAU3B,iBAAiB2B,UAAUe,OAAOM,QAASJ,WACjDjE,OAAOC,QAAQC,IAAI,eACnBF,OAAOC,QAAQC,IAAI+D,gBACbK,aAAetB,UAAUuB,MAAMC,UAAUC,KAAK,gCAEpDzE,OAAOC,QAAQC,IAAI,gBAAiBoE,cAEpCA,aAAaI,GAAG,SAAUnD,IAEtBvB,OAAOC,QAAQC,IAAI,uCAAwCqB,EAAEE,eAC7DzB,OAAOC,QAAQC,IAAI,eAAiBQ,KAAKP,QAAQC,QAAQG,uBAEzDyC,UAAU2B,cAAc/D,cAAc,wBAAwB2C,MAAQ,SACtEP,UAAU4B,uBAMlB5B,UAAU6B"}