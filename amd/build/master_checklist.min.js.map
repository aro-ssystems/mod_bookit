{"version":3,"file":"master_checklist.min.js","sources":["../src/master_checklist.js"],"sourcesContent":["import { BaseComponent } from 'core/reactive';\nimport { masterChecklistReactiveInstance } from 'mod_bookit/master_checklist_reactive';\nimport { SELECTORS } from 'mod_bookit/master_checklist_reactive';\nimport ModalEvents from 'core/modal_events';\nimport ModalForm from 'core_form/modalform';\nimport Templates from 'core/templates';\nimport * as Toast from 'core/toast';\nimport {getString} from 'core/str';\nimport Ajax from 'core/ajax';\n\nexport default class extends BaseComponent {\n\n    static getEvents() {\n        return {\n            categoryRendered: 'mod_bookit:master_checklist_category_rendered',\n        };\n    }\n\n    create(descriptor) {\n\n        window.console.log('create component: ' + descriptor.reactive.name);\n        window.console.log(\"selectors in create master checklist: \", SELECTORS);\n\n    }\n\n    static init(target, selectors) {\n        return new this({\n            element: document.querySelector(target),\n            reactive: masterChecklistReactiveInstance,\n            selectors: selectors || SELECTORS,\n        });\n    }\n\n    // static getEvents() {\n    //     return {\n    //         categoryRendered: 'mod_bookit:master_checklist_category_rendered',\n    //     };\n    // }\n\n    getWatchers() {\n        window.console.log('GET WATCHERS');\n        return [\n            {watch: 'state:updated', handler: this._handleStateEvent},\n            {watch: 'checklistcategories:created', handler: this._handleCategoryCreatedEvent},\n            {watch: 'checklistcategories:deleted', handler: this._handleCategoryDeletedEvent},\n            {watch: 'checklistcategories.name:updated', handler: this._handleCategoryNameUpdatedEvent},\n            {watch: 'checklistcategories.items:updated', handler: this._handleCategoryItemsUpdatedEvent},\n            {watch: 'checklistitems:created', handler: this._handleItemCreatedEvent},\n            {watch: 'checklistitems:deleted', handler: this._handleItemDeletedEvent},\n            {watch: 'checklistitems:updated', handler: this._handleItemUpdatedEvent},\n            {watch: 'checklistitems.categoryid:updated', handler: this._handleItemCategoryUpdatedEvent},\n            {watch: 'checklistitems.title:updated', handler: this._replaceRenderedItem},\n            {watch: 'checklistitems.roomid:updated', handler: this._replaceRenderedItem},\n            {watch: 'checklistitems.roleid:updated', handler: this._replaceRenderedItem},\n            {watch: 'activeRole:updated', handler: this._handleRoleUpdate},\n            {watch: 'activeRoom:updated', handler: this._handleRoomUpdate},\n        ];\n    }\n\n    stateReady(state) {\n\n        window.console.log('state ready');\n        window.console.log(state);\n\n        const name = state.masterchecklists.get(1).name;\n\n        window.console.log(this.selectors.MASTER_CHECKLIST_TITLE);\n\n        const titleElement = this.getElement(this.selectors.MASTER_CHECKLIST_TITLE);\n\n        window.console.log(titleElement);\n\n        titleElement.innerHTML = name;\n\n        this.addEventListener(this.getElement(this.selectors.ADD_CHECKLIST_ITEM_BUTTON), 'click', (e) => {\n            e.preventDefault();\n            window.console.log('ADD CHECKLIST ITEM BUTTON CLICKED');\n            this._handleAddChecklistItemButtonClick(e);\n        });\n\n        this.addEventListener(this.getElement(this.selectors.ADD_CHECKLIST_CATEGORY_BUTTON), 'click', (e) => {\n            e.preventDefault();\n            window.console.log('ADD CHECKLIST CATEGORY BUTTON CLICKED');\n            this._handleAddChecklistCategoryButtonClick(e);\n        });\n\n        this.addEventListener(this.getElement(this.selectors.ROLE_SELECT), 'change', (e) => {\n            window.console.log('ROLE SELECT CHANGE', e);\n            this.reactive.dispatch('roleChanged', { id: e.target.value });\n        });\n        this.addEventListener(this.getElement(this.selectors.ROOM_SELECT), 'change', (e) => {\n            window.console.log('ROOM SELECT CHANGE', e);\n            this.reactive.dispatch('roomChanged', { id: e.target.value });\n        });\n\n    }\n\n    _handleStateEvent(event) {\n        // window.console.log('handle state event');\n    }\n\n    async _handleAddChecklistItemButtonClick(event) {\n        window.console.log('handle add checklist item button click');\n\n        window.console.log(Array.from(this.reactive.state.checklistcategories.values()));\n\n        // TODO dont do this twice\n        const modalForm = new ModalForm({\n            formClass: \"mod_bookit\\\\form\\\\edit_checklistitem_form\",\n            // moduleName: 'mod_bookit/modal_delete_save_cancel',\n            args: {\n                masterid: 1,\n                itemid: null,\n                categories: Array.from(this.reactive.state.checklistcategories.values()),\n            },\n            modalConfig: {\n                title: await getString('checklistitem', 'mod_bookit'),\n            },\n\n        });\n\n        modalForm.addEventListener(modalForm.events.FORM_SUBMITTED, (response) => {\n\n            // TODO dispatch event to update state\n            this.reactive.dispatch('checklistitemCreated', response.detail);\n            // this.reactive.stateManager.processUpdates(response.detail);\n        });\n\n        modalForm.show();\n    }\n\n    async _handleAddChecklistCategoryButtonClick(event) {\n        window.console.log('handle add checklist category button click');\n        const modalForm = new ModalForm({\n            formClass: \"mod_bookit\\\\form\\\\edit_checklist_category_form\",\n            // moduleName: 'mod_bookit/modal_delete_save_cancel',\n            args: {\n                masterid: 1\n            },\n            modalConfig: {\n                title: await getString('checklistcategory', 'mod_bookit'),\n            },\n        });\n\n        modalForm.addEventListener(modalForm.events.FORM_SUBMITTED, (response) => {\n            this.reactive.stateManager.processUpdates(response.detail);\n\n        });\n\n        modalForm.addEventListener(modalForm.events.NOSUBMIT_BUTTON_PRESSED, (response) => {\n            window.console.log('no submit button pressed');\n            window.console.log(response);\n            // this.reactive.stateManager.processUpdates(response.detail);\n\n        });\n\n        modalForm.show();\n    }\n\n    _handleCategoryCreatedEvent(event) {\n        window.console.log('handle category created event', event);\n\n        Templates.renderForPromise('mod_bookit/bookit_checklist_category',\n            {\n                id: event.element.id,\n                name: event.element.name,\n                order: event.element.order,\n                masterid: 1, // TODO get from state\n                type: 'category',\n            })\n            .then(({html, js}) => {\n                Templates.appendNodeContents(this.getElement(this.selectors.TABLE), html, js);\n            })\n            .then(async () => {\n                Toast.add(await getString('checklistcategorysuccess', 'mod_bookit'),\n                    {type: 'success' });\n            })\n            .catch();\n    }\n\n    _handleItemCreatedEvent(event) {\n        window.console.log('handle item created event');\n\n        // const roomName = this.reactive.state.rooms.get(1).name;\n\n        const targetElement = this.getElement(`#bookit-master-checklist-tbody-category-${event.element.category}`);\n\n        window.console.log('event: ', event);\n\n        Templates.renderForPromise('mod_bookit/bookit_checklist_item',\n            {\n                id: event.element.id,\n                title: event.element.title,\n                order: event.element.order,\n                categoryid: event.element.category,\n                roomid: event.element.roomid,\n                roomname: event.element.roomname,\n                roleid: event.element.roleid,\n                rolename: event.element.rolename,\n                type: 'item',\n            })\n            .then(({html, js}) => {\n                // window.console.log('rendered item');\n                // window.console.log(html);\n                // window.console.log(js);\n                Templates.appendNodeContents(targetElement, html, js);\n            })\n            .then(async () => {\n                Toast.add(await getString('checklistitemsuccess', 'mod_bookit'),\n                    {type: 'success' });\n            })\n            .catch(error => {\n                window.console.error('Error rendering checklist item:', error);\n            });\n    }\n\n    _handleItemDeletedEvent(event) {\n        window.console.log('handle item deleted event');\n        window.console.log(event);\n        const targetElement = this.getElement(`#bookit-master-checklist-item-${event.element.id}`);\n        targetElement.remove();\n\n        Toast.add(getString('checklistitemdeleted', 'mod_bookit', {title: event.element.title}),\n            {type: 'success' });\n    }\n\n    _handleItemUpdatedEvent(event) {\n        window.console.log('handle item updated event');\n        window.console.log(event);\n\n        // const targetElement = this.getElement(`#bookit-master-checklist-item-${event.element.id}`);\n\n        // window.console.log('target element', targetElement);\n\n        // TODO if category is changed, element needs to be moved, not just replaced\n\n        // Templates.renderForPromise('mod_bookit/bookit_checklist_item',\n        //     {\n        //         id: event.element.id,\n        //         title: event.element.title,\n        //         order: event.element.order,\n        //         categoryid: event.element.category,\n        //         roomid: event.element.roomid,\n        //         roomname: event.element.roomname,\n        //         roleid: event.element.roleid,\n        //         rolename: event.element.rolename,\n        //     })\n        //     .then(({html, js}) => {\n        //         window.console.log('rendered item');\n        //         window.console.log(html);\n        //         // window.console.log(js);\n        //         Templates.replaceNode(targetElement, html, js);\n        //     })\n        //     .then(async () => {\n        //         Toast.add(await getString('checklistitemupdatesuccess', 'mod_bookit'),\n        //             {type: 'success' });\n        //             // this.dispatchEvent(this.events.categoryRendered, {\n        //             //     component: this\n        //             // });\n        //     })\n        //     .catch(error => {\n        //         window.console.error('Error rendering checklist item:', error);\n        //     });\n    }\n\n    _replaceRenderedItem(event) {\n\n        window.console.log('replace rendered item');\n        window.console.log(event.action);\n\n        const actionParts = event.action.split('.');\n        const fieldPart = actionParts[1].split(':')[0];\n\n        const elementSelector = `td[data-bookit-checklistitem-tabledata-${fieldPart}-id=\"${event.element.id}\"]`;\n\n        window.console.log('elementSelector', elementSelector);\n\n        const targetElement = this.getElement(elementSelector);\n\n        window.console.log('targetElement', targetElement);\n\n\n        if (fieldPart.endsWith('id')) {\n            const nameField = fieldPart.substring(0, fieldPart.length - 2) + 'name';\n\n            if (nameField in event.element) {\n                targetElement.innerHTML = event.element[nameField];\n            }\n        } else {\n            targetElement.innerHTML = event.element[fieldPart];\n        }\n\n        // targetElement.innerHTML = event.element[fieldPart];\n\n        // Templates.renderForPromise('mod_bookit/bookit_checklist_item',\n        //     {\n        //         id: event.element.id,\n        //         title: event.element.title,\n        //         order: event.element.order,\n        //         categoryid: event.element.categoryid,\n        //         roomid: event.element.roomid,\n        //         roomname: event.element.roomname,\n        //         roleid: event.element.roleid,\n        //         rolename: event.element.rolename,\n        //     })\n        //     .then(({html, js}) => {\n        //         Templates.replaceNode(targetElement, html, js);\n        //     })\n        //     .then(async () => {\n        //         Toast.add(await getString('checklistitemupdatesuccess', 'mod_bookit'),\n        //             {type: 'success' });\n\n        //     })\n        //     .catch(error => {\n        //         window.console.error('Error rendering checklist item:', error);\n        //     });\n    }\n\n    _handleItemCategoryUpdatedEvent(event) {\n        window.console.log('handle checklistitem category updated event');\n        window.console.log(event);\n\n        const itemObject = this.reactive.state.checklistitems.get(event.element.id);\n\n        const formDataObj = {\n            itemid: itemObject.id,\n            masterid: 1,\n            title: itemObject.title,\n            categoryid: itemObject.categoryid,\n            roomid: itemObject.roomid,\n            roleid: itemObject.roleid,\n            action: 'put',\n            _qf__mod_bookit_form_edit_checklistitem_form: 1,\n        };\n\n        const formData = new URLSearchParams(formDataObj).toString();\n\n        window.console.log('formData ITEM', formData);\n\n        Ajax.call([{\n            methodname: 'core_form_dynamic_form',\n            args: {\n                formdata: formData,\n                form: 'mod_bookit\\\\form\\\\edit_checklistitem_form'\n            }\n            }])[0]\n            .then((response) => {\n                window.console.log('AJAX response received');\n                window.console.log(response);\n\n                // // TODO move item to target category\n\n                // const itemElement = document.getElementById(`bookit-master-checklist-item-${itemObject.id}`);\n\n\n\n                })\n                .catch(exception => {\n                    window.console.error('AJAX error:', exception);\n                });\n\n    }\n\n    _handleCategoryDeletedEvent(event) {\n        window.console.log('handle category deleted event');\n        window.console.log(event);\n\n        // TODO fix this like on item with this.remove()\n\n        const targetElement = this.getElement(`#bookit-master-checklist-tbody-category-${event.element.id}`);\n\n        targetElement.remove();\n\n        Toast.add(getString('checklistcategorydeleted', 'mod_bookit', {name: event.element.name}),\n            {type: 'success' });\n    }\n\n    _handleCategoryNameUpdatedEvent(event) {\n        window.console.log('handle category name updated event');\n        window.console.log(event);\n\n        const targetElement = this.getElement(`#bookit-master-checklist-category-row-${event.element.id}`);\n\n        window.console.log('target element', targetElement);\n\n        Templates.renderForPromise('mod_bookit/bookit_checklist_category_row',\n            {\n                id: event.element.id,\n                name: event.element.name,\n                order: event.element.order,\n            })\n            .then(({html, js}) => {\n                // window.console.log('rendered category');\n                // window.console.log(html);\n                // window.console.log(js);\n                Templates.replaceNode(targetElement, html, js);\n                // this.dispatchEvent(this.events.categoryRendered, {\n                //     foo: 'bar'\n                // });\n            })\n            .then(async () => {\n                Toast.add(await getString('checklistcategoryupdatesuccess', 'mod_bookit'),\n                    {type: 'success' });\n                    this.dispatchEvent(this.events.categoryRendered, {\n                        categoryId: event.element.id\n                    });\n            })\n            .catch(error => {\n                window.console.error('Error rendering checklist category:', error);\n            });\n\n    }\n\n    _handleCategoryItemsUpdatedEvent(event) {\n        window.console.log('handle category checklistitems updated event');\n        window.console.log(event);\n\n        const targetElement = this.getElement(`#bookit-master-checklist-tbody-category-${event.element.id}`);\n\n        window.console.log('target element', targetElement);\n\n        const category = this.reactive.state.checklistcategories.get(event.element.id);\n        window.console.log('category in _handleCategoryItemUpdatedEvent', category);\n\n        const formDataObj = {\n            id: category.id,\n            masterid: 1,\n            name: category.name,\n            checklistitems: category.items,\n            action: 'put',\n            _qf__mod_bookit_form_edit_checklist_category_form: 1,\n        };\n\n        const formData = new URLSearchParams(formDataObj).toString();\n\n        window.console.log('formData', formData);\n\n\n        Ajax.call([{\n            methodname: 'core_form_dynamic_form',\n            args: {\n                formdata: formData,\n                form: 'mod_bookit\\\\form\\\\edit_checklist_category_form'\n            }\n        }])[0]\n        .then((response) => {\n\n            window.console.log('AJAX response received');\n            window.console.log(response);\n\n\n            // TODO this response could trigger item updates via processUpdates maybe\n\n        //     // const itemObject = this.reactive.state.checklistitems.get(dropdata.id);\n\n        //     // const newEl = document.getElementById(`bookit-master-checklist-item-${itemObject.id}`);\n        //     //         if (newEl) {\n        //     //             this.element.parentNode.insertBefore(newEl, this.element.nextElementSibling);\n        //     //         } else {\n        //     //             window.console.warn('New element not found after appending');\n        //     //         }\n\n        //     // const data = JSON.parse(response.data);\n\n        //     // window.console.log('data', data);\n        //     // window.console.log(data[0].fields.items);\n        //     // const itemsArray = data[0].fields.items.split(',').map(item => parseInt(item));\n        //     // window.console.log('Items as array:', itemsArray);\n\n        //     // // Now you can use itemsArray for rendering the ordered category items\n        //     // itemsArray.forEach(item => {\n        //     //     window.console.log('item', item);\n        //     //     const itemObject = this.reactive.state.checklistitems.get(item);\n        //     //     window.console.log('itemObject', itemObject);\n        //     //     window.console.log('category', category);\n        //     //     Templates.renderForPromise('mod_bookit/bookit_checklist_item',\n        //     //     {\n        //     //         id: itemObject.id,\n        //     //         title: itemObject.title,\n        //     //         order: itemObject.order,\n        //     //         categoryid: category.id,\n        //     //         roomid: itemObject.roomid,\n        //     //         roomname: itemObject.roomname,\n        //     //         roleid: itemObject.roleid,\n        //     //         rolename: itemObject.rolename,\n        //     //     })\n        //     //     .then(({html, js}) => {\n        //     //         // window.console.log('rendered item');\n        //     //         // window.console.log(html);\n        //     //         // window.console.log(js);\n        //     //         this.getElement(`#bookit-master-checklist-item-${itemObject.id}`).remove();\n        //     //         Templates.appendNodeContents(targetElement, html, js);\n        //     //     })\n        //     //     .then(async () => {\n        //     //         // Toast.add(await getString('checklistitemsuccess', 'mod_bookit'),\n        //     //         //     {type: 'success' });\n        //     //     })\n        //     //     .catch(error => {\n        //     //         window.console.error('Error rendering checklist item:', error);\n        //     //     });\n\n        //     // });\n        //     // TODO render the new ordered category items\n\n        //     // if (!response.submitted) {\n        //     //     // Form was not submitted because validation failed.\n        //     //     const promise = new Promise(\n        //     //         resolve => resolve({html: response.html, js: Fragment.processCollectedJavascript(response.javascript)}));\n        //     //     this.modal.setBodyContent(promise);\n        //     //     this.enableButtons();\n        //     //     this.trigger(this.events.SERVER_VALIDATION_ERROR);\n        //     // } else {\n        //     //     // Form was submitted properly. Hide the modal and execute callback.\n        //     //     const data = JSON.parse(response.data);\n        //     //     FormChangeChecker.markFormSubmitted(form[0]);\n        //     //     const event = this.trigger(this.events.FORM_SUBMITTED, data);\n        //     //     if (!event.defaultPrevented) {\n        //     //         this.modal.hide();\n        //     //     }\n        //     // }\n        //     return null;\n        })\n        .catch(exception => {\n            window.console.error('AJAX error:', exception);\n        //     // this.enableButtons();\n        //     // this.onSubmitError(exception);\n        });\n    }\n\n    _handleRoleUpdate(event) {\n        window.console.log('handle role update');\n        window.console.log(event);\n\n        const allCategoryElements = document.querySelectorAll(this.selectors.ALL_CATEGORY_TABLE_ROWS);\n        allCategoryElements.forEach(categoryElement => {\n\n            window.console.log('categoryElement', categoryElement);\n\n            const category = this.reactive.state.checklistcategories.get(categoryElement.dataset.bookitCategoryId);\n\n            window.console.log('category', category);\n            const items = [...category.items];\n            window.console.log('items', items);\n            var hasVisibleItems = false;\n\n\n\n            items.forEach(itemId => {\n\n                window.console.log('itemId', itemId);\n                const itemElement = document.querySelector(`tr[data-bookit-checklistitem-id=\"${itemId}\"]`);\n                window.console.log('itemElement', itemElement);\n                if (parseInt(itemElement.dataset.bookitChecklistitemRole) === event.element.id) {\n                    itemElement.classList.remove('d-none');\n                    if (!hasVisibleItems) {\n                        hasVisibleItems = true;\n                    }\n                } else {\n                    itemElement.classList.add('d-none');\n                }\n            });\n\n            if (!hasVisibleItems) {\n                categoryElement.classList.add('d-none');\n            } else {\n                categoryElement.classList.remove('d-none');\n            }\n\n        });\n\n\n        const allItemElements = document.querySelectorAll(this.selectors.ALL_ITEM_TABLE_ROWS);\n        allItemElements.forEach(itemElement => {\n\n            if (event.element.id === 0) {\n                itemElement.classList.remove('d-none');\n                return;\n            }\n\n            const itemRoleId = parseInt(itemElement.dataset.bookitChecklistitemRole);\n            if (itemRoleId === event.element.id) {\n                itemElement.classList.remove('d-none');\n            } else {\n                itemElement.classList.add('d-none');\n            }\n        });\n    }\n\n    _handleRoomUpdate(event) {\n        window.console.log('handle room update');\n        window.console.log(event);\n    }\n\n}"],"names":["BaseComponent","categoryRendered","create","descriptor","window","console","log","reactive","name","SELECTORS","target","selectors","this","element","document","querySelector","masterChecklistReactiveInstance","getWatchers","watch","handler","_handleStateEvent","_handleCategoryCreatedEvent","_handleCategoryDeletedEvent","_handleCategoryNameUpdatedEvent","_handleCategoryItemsUpdatedEvent","_handleItemCreatedEvent","_handleItemDeletedEvent","_handleItemUpdatedEvent","_handleItemCategoryUpdatedEvent","_replaceRenderedItem","_handleRoleUpdate","_handleRoomUpdate","stateReady","state","masterchecklists","get","MASTER_CHECKLIST_TITLE","titleElement","getElement","innerHTML","addEventListener","ADD_CHECKLIST_ITEM_BUTTON","e","preventDefault","_handleAddChecklistItemButtonClick","ADD_CHECKLIST_CATEGORY_BUTTON","_handleAddChecklistCategoryButtonClick","ROLE_SELECT","dispatch","id","value","ROOM_SELECT","event","Array","from","checklistcategories","values","modalForm","ModalForm","formClass","args","masterid","itemid","categories","modalConfig","title","events","FORM_SUBMITTED","response","detail","show","stateManager","processUpdates","NOSUBMIT_BUTTON_PRESSED","renderForPromise","order","type","then","_ref","html","js","appendNodeContents","TABLE","async","Toast","add","catch","targetElement","category","categoryid","roomid","roomname","roleid","rolename","_ref2","error","remove","action","fieldPart","split","elementSelector","endsWith","nameField","substring","length","itemObject","checklistitems","formDataObj","_qf__mod_bookit_form_edit_checklistitem_form","formData","URLSearchParams","toString","call","methodname","formdata","form","exception","_ref3","replaceNode","dispatchEvent","categoryId","items","_qf__mod_bookit_form_edit_checklist_category_form","querySelectorAll","ALL_CATEGORY_TABLE_ROWS","forEach","categoryElement","dataset","bookitCategoryId","hasVisibleItems","itemId","itemElement","parseInt","bookitChecklistitemRole","classList","ALL_ITEM_TABLE_ROWS"],"mappings":"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"}