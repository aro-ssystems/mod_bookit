{"version":3,"file":"master_checklist.min.js","sources":["../src/master_checklist.js"],"sourcesContent":["import { BaseComponent } from 'core/reactive';\nimport { masterChecklistReactiveInstance } from 'mod_bookit/master_checklist_reactive';\nimport { SELECTORS } from 'mod_bookit/master_checklist_reactive';\nimport ModalForm from 'core_form/modalform';\nimport Templates from 'core/templates';\nimport * as Toast from 'core/toast';\nimport {getString} from 'core/str';\nimport Ajax from 'core/ajax';\n\nexport default class extends BaseComponent {\n\n    static getEvents() {\n        return {\n            categoryRendered: 'mod_bookit:master_checklist_category_rendered',\n        };\n    }\n\n    create(descriptor) {\n\n        window.console.log('create component: ' + descriptor.reactive.name);\n        window.console.log(\"selectors in create master checklist: \", SELECTORS);\n\n    }\n\n    static init(target, selectors) {\n        return new this({\n            element: document.querySelector(target),\n            reactive: masterChecklistReactiveInstance,\n            selectors: selectors || SELECTORS,\n        });\n    }\n\n\n    getWatchers() {\n        window.console.log('GET WATCHERS');\n        return [\n            {watch: 'state:updated', handler: this._handleStateEvent},\n            {watch: 'checklistcategories:created', handler: this._handleCategoryCreatedEvent},\n            {watch: 'checklistcategories:deleted', handler: this._handleCategoryDeletedEvent},\n            {watch: 'checklistcategories.name:updated', handler: this._handleCategoryNameUpdatedEvent},\n            {watch: 'checklistcategories.items:updated', handler: this._handleCategoryItemsUpdatedEvent},\n            {watch: 'checklistitems:created', handler: this._handleItemCreatedEvent},\n            {watch: 'checklistitems:deleted', handler: this._handleItemDeletedEvent},\n            {watch: 'checklistitems:updated', handler: this._handleItemUpdatedEvent},\n            {watch: 'checklistitems.categoryid:updated', handler: this._handleItemCategoryUpdatedEvent},\n            {watch: 'checklistitems.title:updated', handler: this._replaceRenderedItem},\n            {watch: 'checklistitems.roomid:updated', handler: this._replaceRenderedItem},\n            {watch: 'checklistitems.roleid:updated', handler: this._replaceRenderedItem},\n            {watch: 'activeRole:updated', handler: this._handleRoleUpdate},\n            {watch: 'activeRoom:updated', handler: this._handleRoomUpdate},\n        ];\n    }\n\n    stateReady(state) {\n\n        const name = state.masterchecklists.get(1).name;\n\n        const titleElement = this.getElement(this.selectors.MASTER_CHECKLIST_TITLE);\n\n        titleElement.innerHTML = name;\n\n        this.addEventListener(this.getElement(this.selectors.ADD_CHECKLIST_ITEM_BUTTON), 'click', (e) => {\n            e.preventDefault();\n            this._handleAddChecklistItemButtonClick(e);\n        });\n\n        this.addEventListener(this.getElement(this.selectors.ADD_CHECKLIST_CATEGORY_BUTTON), 'click', (e) => {\n            e.preventDefault();\n            this._handleAddChecklistCategoryButtonClick(e);\n        });\n\n        this.addEventListener(this.getElement(this.selectors.ROLE_SELECT), 'change', (e) => {\n            this.reactive.dispatch('roleChanged', { id: e.target.value });\n        });\n        this.addEventListener(this.getElement(this.selectors.ROOM_SELECT), 'change', (e) => {\n            this.reactive.dispatch('roomChanged', { id: e.target.value });\n        });\n\n    }\n\n    _handleStateEvent(event) {\n\n    }\n\n    async _handleAddChecklistItemButtonClick(event) {\n\n        // TODO do this in mutation instead\n        const modalForm = new ModalForm({\n            formClass: \"mod_bookit\\\\form\\\\edit_checklistitem_form\",\n            args: {\n                masterid: 1,\n                itemid: null,\n                categories: Array.from(this.reactive.state.checklistcategories.values()),\n            },\n            modalConfig: {\n                title: await getString('checklistitem', 'mod_bookit'),\n            },\n\n        });\n\n        modalForm.addEventListener(modalForm.events.FORM_SUBMITTED, (response) => {\n            this.reactive.dispatch('checklistitemCreated', response.detail);\n        });\n\n        modalForm.show();\n    }\n\n    async _handleAddChecklistCategoryButtonClick(event) {\n        const modalForm = new ModalForm({\n            formClass: \"mod_bookit\\\\form\\\\edit_checklist_category_form\",\n            args: {\n                masterid: 1\n            },\n            modalConfig: {\n                title: await getString('checklistcategory', 'mod_bookit'),\n            },\n        });\n\n        modalForm.addEventListener(modalForm.events.FORM_SUBMITTED, (response) => {\n            this.reactive.stateManager.processUpdates(response.detail);\n\n        });\n\n        modalForm.show();\n    }\n\n    _handleCategoryCreatedEvent(event) {\n        Templates.renderForPromise('mod_bookit/bookit_checklist_category',\n            {\n                id: event.element.id,\n                name: event.element.name,\n                order: event.element.order,\n                masterid: 1, // TODO get from state\n                type: 'category',\n            })\n            .then(({html, js}) => {\n                Templates.appendNodeContents(this.getElement(this.selectors.TABLE), html, js);\n            })\n            .then(async () => {\n                Toast.add(await getString('checklistcategorysuccess', 'mod_bookit'),\n                    {type: 'success' });\n            })\n            .catch();\n    }\n\n    _handleItemCreatedEvent(event) {\n        const targetElement = this.getElement(`#bookit-master-checklist-tbody-category-${event.element.category}`);\n\n        window.console.log('EVENT IN ITEM CREATED: ', event);\n\n        const roomNames = [];\n        if (event.element.roomnames) {\n            Object.entries(event.element.roomnames).forEach(([key, value]) => {\n                roomNames.push({\n                    'roomid': key,\n                    'roomname': value\n                });\n            });\n        }\n\n        Templates.renderForPromise('mod_bookit/bookit_checklist_item',\n            {\n                id: event.element.id,\n                title: event.element.title,\n                order: event.element.order,\n                categoryid: event.element.category,\n                roomids: event.element.roomids,\n                roomnames: roomNames,\n                roleid: event.element.roleid,\n                rolename: event.element.rolename,\n                type: 'item',\n            })\n            .then(({html, js}) => {\n                Templates.appendNodeContents(targetElement, html, js);\n            })\n            .then(async () => {\n                Toast.add(await getString('checklistitemsuccess', 'mod_bookit'),\n                    {type: 'success' });\n            })\n            .catch(error => {\n                window.console.error('Error rendering checklist item:', error);\n            });\n    }\n\n    _handleItemDeletedEvent(event) {\n        const targetElement = this.getElement(`#bookit-master-checklist-item-${event.element.id}`);\n        targetElement.remove();\n\n        Toast.add(getString('checklistitemdeleted', 'mod_bookit', {title: event.element.title}),\n            {type: 'success' });\n    }\n\n    _handleItemUpdatedEvent(event) {\n        //TODO remove\n    }\n\n    _replaceRenderedItem(event) {\n\n        const actionParts = event.action.split('.');\n        const fieldPart = actionParts[1].split(':')[0];\n\n        const elementSelector = `td[data-bookit-checklistitem-tabledata-${fieldPart}-id=\"${event.element.id}\"]`;\n\n        const targetElement = this.getElement(elementSelector);\n\n        if (fieldPart.endsWith('id')) {\n            const nameField = fieldPart.substring(0, fieldPart.length - 2) + 'name';\n\n            if (nameField in event.element) {\n                targetElement.innerHTML = event.element[nameField];\n            }\n        } else {\n            targetElement.innerHTML = event.element[fieldPart];\n        }\n\n    }\n\n    _handleItemCategoryUpdatedEvent(event) {\n        const itemObject = this.reactive.state.checklistitems.get(event.element.id);\n\n        const formDataObj = {\n            itemid: itemObject.id,\n            masterid: 1,\n            title: itemObject.title,\n            categoryid: itemObject.categoryid,\n            roomid: itemObject.roomid,\n            roleid: itemObject.roleid,\n            action: 'put',\n            _qf__mod_bookit_form_edit_checklistitem_form: 1,\n        };\n\n        const formData = new URLSearchParams(formDataObj).toString();\n        // TODO move to mutation\n        Ajax.call([{\n            methodname: 'core_form_dynamic_form',\n            args: {\n                formdata: formData,\n                form: 'mod_bookit\\\\form\\\\edit_checklistitem_form'\n            }\n            }])[0]\n            .then((response) => {\n                // TODO handle response?\n                })\n                .catch(exception => {\n                    window.console.error('AJAX error:', exception);\n                });\n\n    }\n\n    _handleCategoryDeletedEvent(event) {\n        const targetElement = this.getElement(`#bookit-master-checklist-tbody-category-${event.element.id}`);\n\n        targetElement.remove();\n\n        Toast.add(getString('checklistcategorydeleted', 'mod_bookit', {name: event.element.name}),\n            {type: 'success' });\n    }\n\n    _handleCategoryNameUpdatedEvent(event) {\n        const targetElement = this.getElement(`#bookit-master-checklist-category-row-${event.element.id}`);\n\n        Templates.renderForPromise('mod_bookit/bookit_checklist_category_row',\n            {\n                id: event.element.id,\n                name: event.element.name,\n                order: event.element.order,\n            })\n            .then(({html, js}) => {\n                Templates.replaceNode(targetElement, html, js);\n\n            })\n            .then(async () => {\n                Toast.add(await getString('checklistcategoryupdatesuccess', 'mod_bookit'),\n                    {type: 'success' });\n                    this.dispatchEvent(this.events.categoryRendered, {\n                        categoryId: event.element.id\n                    });\n            })\n            .catch(error => {\n                window.console.error('Error rendering checklist category:', error);\n            });\n\n    }\n\n    _handleCategoryItemsUpdatedEvent(event) {\n        const targetElement = this.getElement(`#bookit-master-checklist-tbody-category-${event.element.id}`);\n\n        const category = this.reactive.state.checklistcategories.get(event.element.id);\n\n        const formDataObj = {\n            id: category.id,\n            masterid: 1,\n            name: category.name,\n            checklistitems: category.items,\n            action: 'put',\n            _qf__mod_bookit_form_edit_checklist_category_form: 1,\n        };\n\n        const formData = new URLSearchParams(formDataObj).toString();\n        // TODO move to mutation\n        Ajax.call([{\n            methodname: 'core_form_dynamic_form',\n            args: {\n                formdata: formData,\n                form: 'mod_bookit\\\\form\\\\edit_checklist_category_form'\n            }\n        }])[0]\n        .then((response) => {\n            // TODO handle response?\n        })\n        .catch(exception => {\n            window.console.error('AJAX error:', exception);\n\n        });\n    }\n\n    _handleRoleUpdate(event) {\n        const allCategoryElements = document.querySelectorAll(this.selectors.ALL_CATEGORY_TABLE_ROWS);\n        allCategoryElements.forEach(categoryElement => {\n\n            const category = this.reactive.state.checklistcategories.get(categoryElement.dataset.bookitCategoryId);\n            const items = [...category.items];\n            var hasVisibleItems = false;\n\n            const activeRoom = this.reactive.state.activeRoom.id;\n\n            items.forEach(itemId => {\n\n                const itemElement = document.querySelector(`tr[data-bookit-checklistitem-id=\"${itemId}\"]`);\n\n                if (activeRoom === 0) {\n\n                    if (parseInt(itemElement.dataset.bookitChecklistitemRole) === event.element.id ||  event.element.id === 0) {\n                        itemElement.classList.remove('d-none');\n                        if (!hasVisibleItems) {\n                            hasVisibleItems = true;\n                        }\n                    } else {\n                        itemElement.classList.add('d-none');\n                    }\n                } else if (activeRoom === parseInt(itemElement.dataset.bookitChecklistitemRoom)) {\n\n                    if (parseInt(itemElement.dataset.bookitChecklistitemRole) === event.element.id || event.element.id === 0) {\n                        itemElement.classList.remove('d-none');\n                        if (!hasVisibleItems) {\n                            hasVisibleItems = true;\n                        }\n                    } else {\n                        itemElement.classList.add('d-none');\n                    }\n                } else {\n\n                    itemElement.classList.add('d-none');\n                }\n            });\n\n            if (!hasVisibleItems) {\n                categoryElement.classList.add('d-none');\n            } else {\n                categoryElement.classList.remove('d-none');\n            }\n\n        });\n\n    }\n\n    _handleRoomUpdate(event) {\n\n        const allCategoryElements = document.querySelectorAll(this.selectors.ALL_CATEGORY_TABLE_ROWS);\n        allCategoryElements.forEach(categoryElement => {\n\n            const category = this.reactive.state.checklistcategories.get(categoryElement.dataset.bookitCategoryId);\n\n            const items = [...category.items];\n\n            var hasVisibleItems = false;\n\n            const activeRole = this.reactive.state.activeRole.id;\n\n            items.forEach(itemId => {\n\n                // TODO get item from state and check if room is in roomids array\n\n                const stateItem = this.reactive.state.checklistitems.get(itemId);\n\n                window.console.log('STATE ITEM IN ROOM UPDATE: ', stateItem);\n\n                window.console.log('ITEM ELEMENT IN ROOM UPDATE: ', itemId);\n\n                window.console.log('EVENT ELEMENT ID IN ROOM UPDATE: ', event.element.id);\n\n                var isInRoom = false;\n\n                const roomIds = stateItem.roomids;\n\n                if (roomIds.includes(event.element.id.toString())) {\n                    isInRoom = true;\n                    window.console.log('ITEM IS IN ROOM: ', itemId);\n                } else {\n                    window.console.log('ITEM IS NOT IN ROOM: ', itemId);\n                }\n\n                const itemElement = document.querySelector(`tr[data-bookit-checklistitem-id=\"${itemId}\"]`);\n\n                if (isInRoom) {\n                    if (activeRole === 0 || parseInt(itemElement.dataset.bookitChecklistitemRole) === activeRole) {\n                        itemElement.classList.remove('d-none');\n                        if (!hasVisibleItems) {\n                            hasVisibleItems = true;\n                        }\n                    } else {\n                        itemElement.classList.add('d-none');\n                    }\n                } else {\n\n                    if (event.element.id === 0 &&\n                        (parseInt(itemElement.dataset.bookitChecklistitemRole) === activeRole || activeRole === 0)) {\n                        itemElement.classList.remove('d-none');\n                        if (!hasVisibleItems) {\n                            hasVisibleItems = true;\n                        }\n                    } else {\n                        itemElement.classList.add('d-none');\n                    }\n                }\n            });\n\n            if (!hasVisibleItems) {\n                categoryElement.classList.add('d-none');\n            } else {\n                categoryElement.classList.remove('d-none');\n            }\n\n        });\n    }\n\n}"],"names":["BaseComponent","categoryRendered","create","descriptor","window","console","log","reactive","name","SELECTORS","target","selectors","this","element","document","querySelector","masterChecklistReactiveInstance","getWatchers","watch","handler","_handleStateEvent","_handleCategoryCreatedEvent","_handleCategoryDeletedEvent","_handleCategoryNameUpdatedEvent","_handleCategoryItemsUpdatedEvent","_handleItemCreatedEvent","_handleItemDeletedEvent","_handleItemUpdatedEvent","_handleItemCategoryUpdatedEvent","_replaceRenderedItem","_handleRoleUpdate","_handleRoomUpdate","stateReady","state","masterchecklists","get","getElement","MASTER_CHECKLIST_TITLE","innerHTML","addEventListener","ADD_CHECKLIST_ITEM_BUTTON","e","preventDefault","_handleAddChecklistItemButtonClick","ADD_CHECKLIST_CATEGORY_BUTTON","_handleAddChecklistCategoryButtonClick","ROLE_SELECT","dispatch","id","value","ROOM_SELECT","event","modalForm","ModalForm","formClass","args","masterid","itemid","categories","Array","from","checklistcategories","values","modalConfig","title","events","FORM_SUBMITTED","response","detail","show","stateManager","processUpdates","renderForPromise","order","type","then","_ref","html","js","appendNodeContents","TABLE","async","Toast","add","catch","targetElement","category","roomNames","roomnames","Object","entries","forEach","_ref2","key","push","categoryid","roomids","roleid","rolename","_ref3","error","remove","fieldPart","action","split","elementSelector","endsWith","nameField","substring","length","itemObject","checklistitems","formDataObj","roomid","_qf__mod_bookit_form_edit_checklistitem_form","formData","URLSearchParams","toString","call","methodname","formdata","form","exception","_ref4","replaceNode","dispatchEvent","categoryId","items","_qf__mod_bookit_form_edit_checklist_category_form","querySelectorAll","ALL_CATEGORY_TABLE_ROWS","categoryElement","dataset","bookitCategoryId","hasVisibleItems","activeRoom","itemId","itemElement","parseInt","bookitChecklistitemRole","classList","bookitChecklistitemRoom","activeRole","stateItem","isInRoom","includes"],"mappings":"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"}