{"version":3,"file":"master_checklist.min.js","sources":["../src/master_checklist.js"],"sourcesContent":["import {BaseComponent} from 'core/reactive';\nimport {masterChecklistReactiveInstance} from 'mod_bookit/master_checklist_reactive';\nimport {SELECTORS} from 'mod_bookit/master_checklist_reactive';\nimport ModalForm from 'core_form/modalform';\nimport Templates from 'core/templates';\nimport * as Toast from 'core/toast';\nimport {getString} from 'core/str';\nimport Ajax from 'core/ajax';\nimport ChecklistHelper from 'mod_bookit/checklist_helper';\n\nexport default class extends BaseComponent {\n\n    static getEvents() {\n        return {\n            categoryRendered: 'mod_bookit:master_checklist_category_rendered',\n        };\n    }\n\n    static init(target, selectors) {\n        return new this({\n            element: document.querySelector(target),\n            reactive: masterChecklistReactiveInstance,\n            selectors: selectors || SELECTORS,\n        });\n    }\n\n    create() {\n        this.helper = new ChecklistHelper();\n    }\n\n    getWatchers() {\n        return [\n            {watch: 'checklistcategories:created', handler: this._handleCategoryCreatedEvent},\n            {watch: 'checklistcategories:deleted', handler: this._handleCategoryDeletedEvent},\n            {watch: 'checklistcategories.name:updated', handler: this._handleCategoryNameUpdatedEvent},\n            {watch: 'checklistcategories.items:updated', handler: this._handleCategoryItemsUpdatedEvent},\n            {watch: 'checklistitems:created', handler: this._handleItemCreatedEvent},\n            {watch: 'checklistitems:deleted', handler: this._handleItemDeletedEvent},\n            {watch: 'checklistitems.categoryid:updated', handler: this._handleItemCategoryUpdatedEvent},\n            {watch: 'checklistitems.title:updated', handler: this._replaceRenderedItem},\n            {watch: 'checklistitems.roomids:updated', handler: this._replaceRenderedItem},\n            {watch: 'checklistitems.roleid:updated', handler: this._replaceRenderedItem},\n            // {watch: 'activeRole:updated', handler: this._handleRoleUpdate},\n            // {watch: 'activeRoom:updated', handler: this._handleRoomUpdate},\n        ];\n    }\n\n    stateReady(state) {\n\n        const name = state.masterchecklists.get(1).name;\n\n        const titleElement = this.getElement(this.selectors.MASTER_CHECKLIST_TITLE);\n\n        titleElement.innerHTML = name;\n\n        this.addEventListener(this.getElement(this.selectors.ADD_CHECKLIST_ITEM_BUTTON), 'click', (e) => {\n            e.preventDefault();\n            this._handleAddChecklistItemButtonClick(e);\n        });\n\n        this.addEventListener(this.getElement(this.selectors.ADD_CHECKLIST_CATEGORY_BUTTON), 'click', (e) => {\n            e.preventDefault();\n            this._handleAddChecklistCategoryButtonClick(e);\n        });\n\n        this.addEventListener(this.getElement(this.selectors.ROLE_SELECT), 'change', (e) => {\n            this.reactive.dispatch('roleChanged', {id: e.target.value});\n        });\n        this.addEventListener(this.getElement(this.selectors.ROOM_SELECT), 'change', (e) => {\n            this.reactive.dispatch('roomChanged', {id: e.target.value});\n        });\n\n        const spinnerElement = document.querySelector(this.selectors.LOADING_SPINNER);\n        spinnerElement.classList.add('d-none');\n\n        const mainElement = document.querySelector(this.selectors.MAIN_ELEMENT);\n        mainElement.classList.remove('d-none');\n\n    }\n\n    async _handleAddChecklistItemButtonClick() {\n        const modalForm = new ModalForm({\n            formClass: \"mod_bookit\\\\form\\\\edit_checklistitem_form\",\n            args: {\n                masterid: 1,\n                itemid: null,\n                categories: Array.from(this.reactive.state.checklistcategories.values()),\n            },\n            modalConfig: {\n                title: await getString('checklistitem', 'mod_bookit'),\n            },\n\n        });\n\n        modalForm.addEventListener(modalForm.events.FORM_SUBMITTED, (response) => {\n            this.reactive.dispatch('checklistitemCreated', response.detail);\n        });\n\n        modalForm.show();\n    }\n\n    async _handleAddChecklistCategoryButtonClick() {\n        const modalForm = new ModalForm({\n            formClass: \"mod_bookit\\\\form\\\\edit_checklist_category_form\",\n            args: {\n                masterid: 1\n            },\n            modalConfig: {\n                title: await getString('checklistcategory', 'mod_bookit'),\n            },\n        });\n\n        modalForm.addEventListener(modalForm.events.FORM_SUBMITTED, (response) => {\n            this.reactive.stateManager.processUpdates(response.detail);\n\n        });\n\n        modalForm.show();\n    }\n\n    _handleCategoryCreatedEvent(event) {\n        Templates.renderForPromise('mod_bookit/bookit_checklist_category',\n            {\n                id: event.element.id,\n                name: event.element.name,\n                order: event.element.order,\n                masterid: 1, // TODO get from state\n                type: 'category',\n            })\n            .then(({html, js}) => {\n                Templates.appendNodeContents(this.getElement(this.selectors.TABLE), html, js);\n            })\n            .then(async () => {\n                Toast.add(await getString('checklistcategorysuccess', 'mod_bookit'),\n                    {type: 'success'});\n            })\n            .catch(error => {\n                window.console.error('Error rendering checklist item:', error);\n            });\n    }\n\n    _handleItemCreatedEvent(event) {\n        const targetElement = this.getElement(`#bookit-master-checklist-tbody-category-${event.element.category}`);\n\n        const roomNames = [];\n        if (event.element.roomnames) {\n            Object.entries(event.element.roomnames).forEach(([key, value]) => {\n                roomNames.push({\n                    'roomid': key,\n                    'roomname': value\n                });\n            });\n        }\n\n        const roleNames = [];\n        if (event.element.rolenames) {\n            event.element.rolenames.forEach((role) => {\n                roleNames.push({\n                    'roleid': role.roleid,\n                    'rolename': role.rolename\n                });\n            });\n        }\n\n        Templates.renderForPromise('mod_bookit/bookit_checklist_item',\n            {\n                id: event.element.id,\n                title: event.element.title,\n                order: event.element.order,\n                categoryid: event.element.category,\n                roomids: event.element.roomids,\n                roomnames: roomNames,\n                roleids: event.element.roleids,\n                rolenames: roleNames,\n                type: 'item',\n            })\n            .then(({html, js}) => {\n                Templates.appendNodeContents(targetElement, html, js);\n            })\n            .then(async () => {\n                Toast.add(await getString('checklistitemsuccess', 'mod_bookit'),\n                    {type: 'success'});\n            })\n            .catch(error => {\n                window.console.error('Error rendering checklist item:', error);\n            });\n    }\n\n    _handleItemDeletedEvent(event) {\n        const targetElement = this.getElement(`#bookit-master-checklist-item-${event.element.id}`);\n        targetElement.remove();\n\n        Toast.add(getString('checklistitemdeleted', 'mod_bookit', {title: event.element.title}),\n            {type: 'success'});\n    }\n\n    _replaceRenderedItem(event) {\n\n        window.console.log('REPLACING RENDERED ITEM: ', event);\n\n        const actionParts = event.action.split('.');\n        const fieldPart = actionParts[1].split(':')[0];\n\n        const elementSelector = `span[data-bookit-checklistitem-tabledata-${fieldPart}-id=\"${event.element.id}\"]`;\n\n        window.console.log('ELEMENT SELECTOR: ', elementSelector);\n\n        const targetElement = this.getElement(elementSelector);\n\n        window.console.log('TARGET ELEMENT: ', targetElement);\n\n        if (fieldPart.endsWith('id')) {\n            const nameField = fieldPart.substring(0, fieldPart.length - 2) + 'name';\n\n            if (nameField in event.element) {\n                targetElement.innerHTML = event.element[nameField];\n            }\n        } else if (fieldPart.endsWith('ids')) {\n\n            const stateItem = this.reactive.state.checklistitems.get(event.element.id);\n\n            // const itemRooms = [];\n            // if (stateItem.roomnames) {\n            //     Object.entries(stateItem.roomnames).forEach(([id, name]) => {\n            //         itemRooms.push({\n            //             'roomid': parseInt(id),\n            //             'roomname': name\n            //         });\n            //     });\n            // }\n\n            const roomsSelector = `td[data-bookit-checklistitem-tabledata-${fieldPart}-id=\"${event.element.id}\"]`;\n            const roomsElement = this.getElement(roomsSelector);\n\n            window.console.log('ITEM ROOMS: ', stateItem.roomnames);\n\n            Templates.renderForPromise('mod_bookit/bookit_checklist_item_rooms',\n            {\n                roomnames: stateItem.roomnames\n            })\n            .then(({html, js}) => {\n                Templates.replaceNode(roomsElement, html, js);\n\n            })\n            .then(async () => {\n                Toast.add(await getString('checklistitemupdatesuccess', 'mod_bookit'),\n                    {type: 'success'});\n                    // this.dispatchEvent(this.events.categoryRendered, {\n                    //     categoryId: event.element.id\n                    // });\n            })\n            .catch(error => {\n                window.console.error('Error rendering checklist category:', error);\n            });\n            // var elementString = event.element[fieldPart];\n\n            // let roomIds = [];\n\n            // if (elementString.includes(',')) {\n            //     roomIds = elementString.split(',').map(id => parseInt(id));\n            // } else if (elementString !== '') {\n            //     roomIds = [parseInt(elementString)];\n            // }\n\n            // const roomNames = [];\n            // if (roomIds.length > 0) {\n            //     roomIds.forEach(roomId => {\n            //         if (event.element.roomnames[roomId]) {\n            //             roomNames.push(event.element.roomnames[roomId]);\n            //         }\n            //     });\n            //     // targetElement.innerHTML = roomNames.join(', ');\n            // }\n\n        } else {\n            targetElement.innerHTML = event.element[fieldPart];\n        }\n\n    }\n\n    _handleItemCategoryUpdatedEvent(event) {\n        const itemObject = this.reactive.state.checklistitems.get(event.element.id);\n\n        const formDataObj = {\n            itemid: itemObject.id,\n            masterid: 1,\n            title: itemObject.title,\n            categoryid: itemObject.categoryid,\n            roomid: itemObject.roomid,\n            roleid: itemObject.roleid,\n            action: 'put',\n            _qf__mod_bookit_form_edit_checklistitem_form: 1,\n        };\n\n        const formData = new URLSearchParams(formDataObj).toString();\n        // TODO move to mutation\n        Ajax.call([{\n            methodname: 'core_form_dynamic_form',\n            args: {\n                formdata: formData,\n                form: 'mod_bookit\\\\form\\\\edit_checklistitem_form'\n            }\n            }])[0]\n            .then((response) => {\n                // TODO handle response?\n                })\n                .catch(exception => {\n                    window.console.error('AJAX error:', exception);\n                });\n\n    }\n\n    _handleCategoryDeletedEvent(event) {\n        const targetElement = this.getElement(`#bookit-master-checklist-tbody-category-${event.element.id}`);\n\n        targetElement.remove();\n\n        Toast.add(getString('checklistcategorydeleted', 'mod_bookit', {name: event.element.name}),\n            {type: 'success'});\n    }\n\n    _handleCategoryNameUpdatedEvent(event) {\n        const targetElement = this.getElement(`#bookit-master-checklist-category-row-${event.element.id}`);\n\n        Templates.renderForPromise('mod_bookit/bookit_checklist_category_row',\n            {\n                id: event.element.id,\n                name: event.element.name,\n                order: event.element.order,\n            })\n            .then(({html, js}) => {\n                Templates.replaceNode(targetElement, html, js);\n\n            })\n            .then(async () => {\n                Toast.add(await getString('checklistcategoryupdatesuccess', 'mod_bookit'),\n                    {type: 'success'});\n                    this.dispatchEvent(this.events.categoryRendered, {\n                        categoryId: event.element.id\n                    });\n            })\n            .catch(error => {\n                window.console.error('Error rendering checklist category:', error);\n            });\n\n    }\n\n    _handleCategoryItemsUpdatedEvent(event) {\n        const targetElement = this.getElement(`#bookit-master-checklist-tbody-category-${event.element.id}`);\n\n        const category = this.reactive.state.checklistcategories.get(event.element.id);\n\n        const formDataObj = {\n            id: category.id,\n            masterid: 1,\n            name: category.name,\n            checklistitems: category.items,\n            action: 'put',\n            _qf__mod_bookit_form_edit_checklist_category_form: 1,\n        };\n\n        const formData = new URLSearchParams(formDataObj).toString();\n        // TODO move to mutation\n        Ajax.call([{\n            methodname: 'core_form_dynamic_form',\n            args: {\n                formdata: formData,\n                form: 'mod_bookit\\\\form\\\\edit_checklist_category_form'\n            }\n        }])[0]\n        .then((response) => {\n            // TODO handle response?\n        })\n        .catch(exception => {\n            window.console.error('AJAX error:', exception);\n\n        });\n    }\n\n    _handleRoleUpdate(event) {\n        const allCategoryElements = document.querySelectorAll(this.selectors.ALL_CATEGORY_TABLE_ROWS);\n        allCategoryElements.forEach(categoryElement => {\n\n            const category = this.reactive.state.checklistcategories.get(categoryElement.dataset.bookitCategoryId);\n            const items = [...category.items];\n            var hasVisibleItems = false;\n\n            const activeRoom = this.reactive.state.activeRoom.id;\n\n            items.forEach(itemId => {\n\n                // TODO fix rooms\n\n                const itemElement = document.querySelector(`tr[data-bookit-checklistitem-id=\"${itemId}\"]`);\n\n                if (activeRoom === 0) {\n\n                    if (parseInt(itemElement.dataset.bookitChecklistitemRole) === event.element.id ||  event.element.id === 0) {\n                        itemElement.classList.remove('d-none');\n                        if (!hasVisibleItems) {\n                            hasVisibleItems = true;\n                        }\n                    } else {\n                        itemElement.classList.add('d-none');\n                    }\n                } else if (activeRoom === parseInt(itemElement.dataset.bookitChecklistitemRoom)) {\n\n                    if (parseInt(itemElement.dataset.bookitChecklistitemRole) === event.element.id || event.element.id === 0) {\n                        itemElement.classList.remove('d-none');\n                        if (!hasVisibleItems) {\n                            hasVisibleItems = true;\n                        }\n                    } else {\n                        itemElement.classList.add('d-none');\n                    }\n                } else {\n\n                    itemElement.classList.add('d-none');\n                }\n            });\n\n            if (!hasVisibleItems) {\n                categoryElement.classList.add('d-none');\n            } else {\n                categoryElement.classList.remove('d-none');\n            }\n\n        });\n\n    }\n\n    _handleRoomUpdate(event) {\n\n        const allCategoryElements = document.querySelectorAll(this.selectors.ALL_CATEGORY_TABLE_ROWS);\n        allCategoryElements.forEach(categoryElement => {\n\n            const category = this.reactive.state.checklistcategories.get(categoryElement.dataset.bookitCategoryId);\n\n            const items = [...category.items];\n\n            var hasVisibleItems = false;\n\n            const activeRole = this.reactive.state.activeRole.id;\n\n            // items.forEach(itemId => {\n\n            //     const stateItem = this.reactive.state.checklistitems.get(itemId);\n\n            //     var isInRoom = false;\n\n            //     const roomIds = stateItem.roomids;\n\n            //     if (roomIds.includes(event.element.id.toString())) {\n            //         isInRoom = true;\n            //         window.console.log('ITEM IS IN ROOM: ', itemId);\n            //     } else {\n            //         window.console.log('ITEM IS NOT IN ROOM: ', itemId);\n            //     }\n\n            //     const itemElement = document.querySelector(`tr[data-bookit-checklistitem-id=\"${itemId}\"]`);\n\n            //     if (isInRoom) {\n            //         if (activeRole === 0 || parseInt(itemElement.dataset.bookitChecklistitemRole) === activeRole) {\n            //             itemElement.classList.remove('d-none');\n            //             if (!hasVisibleItems) {\n            //                 hasVisibleItems = true;\n            //             }\n            //         } else {\n            //             itemElement.classList.add('d-none');\n            //         }\n            //     } else {\n\n            //         if (event.element.id === 0 &&\n            //             (parseInt(itemElement.dataset.bookitChecklistitemRole) === activeRole || activeRole === 0)) {\n            //             itemElement.classList.remove('d-none');\n            //             if (!hasVisibleItems) {\n            //                 hasVisibleItems = true;\n            //             }\n            //         } else {\n            //             itemElement.classList.add('d-none');\n            //         }\n            //     }\n            // });\n\n            // if (!hasVisibleItems) {\n            //     categoryElement.classList.add('d-none');\n            // } else {\n            //     categoryElement.classList.remove('d-none');\n            // }\n\n        });\n    }\n\n}"],"names":["BaseComponent","categoryRendered","target","selectors","this","element","document","querySelector","reactive","masterChecklistReactiveInstance","SELECTORS","create","helper","ChecklistHelper","getWatchers","watch","handler","_handleCategoryCreatedEvent","_handleCategoryDeletedEvent","_handleCategoryNameUpdatedEvent","_handleCategoryItemsUpdatedEvent","_handleItemCreatedEvent","_handleItemDeletedEvent","_handleItemCategoryUpdatedEvent","_replaceRenderedItem","stateReady","state","name","masterchecklists","get","getElement","MASTER_CHECKLIST_TITLE","innerHTML","addEventListener","ADD_CHECKLIST_ITEM_BUTTON","e","preventDefault","_handleAddChecklistItemButtonClick","ADD_CHECKLIST_CATEGORY_BUTTON","_handleAddChecklistCategoryButtonClick","ROLE_SELECT","dispatch","id","value","ROOM_SELECT","LOADING_SPINNER","classList","add","MAIN_ELEMENT","remove","modalForm","ModalForm","formClass","args","masterid","itemid","categories","Array","from","checklistcategories","values","modalConfig","title","events","FORM_SUBMITTED","response","detail","show","stateManager","processUpdates","event","renderForPromise","order","type","then","_ref","html","js","appendNodeContents","TABLE","async","Toast","catch","error","window","console","targetElement","category","roomNames","roomnames","Object","entries","forEach","_ref2","key","push","roleNames","rolenames","role","roleid","rolename","categoryid","roomids","roleids","_ref3","log","fieldPart","action","split","elementSelector","endsWith","nameField","substring","length","stateItem","checklistitems","roomsSelector","roomsElement","_ref4","replaceNode","itemObject","formDataObj","roomid","_qf__mod_bookit_form_edit_checklistitem_form","formData","URLSearchParams","toString","call","methodname","formdata","form","exception","_ref5","dispatchEvent","categoryId","items","_qf__mod_bookit_form_edit_checklist_category_form","_handleRoleUpdate","querySelectorAll","ALL_CATEGORY_TABLE_ROWS","categoryElement","dataset","bookitCategoryId","hasVisibleItems","activeRoom","itemId","itemElement","parseInt","bookitChecklistitemRole","bookitChecklistitemRoom","_handleRoomUpdate","activeRole"],"mappings":"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"}