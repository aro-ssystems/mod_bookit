{"version":3,"file":"filter_ui.min.js","sources":["../src/filter_ui.js"],"sourcesContent":["import {call as fetchMany} from 'core/ajax';\nimport {getStrings} from 'core/str';\nimport Templates from 'core/templates';\n\n/**\n * FilterUI class to manage the filter interface\n */\nexport class FilterUI {\n    constructor() {\n        this.strings = {};\n        this.filters = {\n            search: '',\n            room: '',\n            timeslot: '',\n            faculty: '',\n            status: ''\n        };\n        this.hasAdminAccess = false;\n    }\n\n    /**\n     * Initialize the filter UI\n     * @param {boolean} hasAdminAccess - Whether the user has admin access\n     * @returns {Promise}\n     */\n    async init(hasAdminAccess = false) {\n        this.hasAdminAccess = hasAdminAccess;\n\n        // Load strings first\n        await this.loadStrings();\n\n        // Render the UI\n        await this.render();\n\n        // Load filter data\n        await this.loadFilterData();\n\n        // Attach event listeners\n        this.attachEventListeners();\n    }\n\n    /**\n     * Load filter data from server\n     * @returns {Promise}\n     */\n    async loadFilterData() {\n        const [rooms, faculties, statuses] = await Promise.all([\n            this.fetchRooms(),\n            this.fetchFaculties(),\n            this.fetchStatuses()\n        ]);\n\n        const timeslots = [\n            {id: 'morning', name: this.strings.morning},\n            {id: 'afternoon', name: this.strings.afternoon},\n            {id: 'evening', name: this.strings.evening}\n        ];\n\n        this.updateOptions({\n            room: rooms || [],\n            timeslot: timeslots,\n            faculty: faculties || [],\n            status: statuses || []\n        });\n    }\n\n    /**\n     * Fetch rooms from server\n     * @returns {Promise}\n     */\n    async fetchRooms() {\n        const response = await fetchMany([{\n            methodname: 'mod_bookit_get_rooms',\n            args: {}\n        }]);\n        return response[0];\n    }\n\n    /**\n     * Fetch faculties from server\n     * @returns {Promise}\n     */\n    async fetchFaculties() {\n        const response = await fetchMany([{\n            methodname: 'mod_bookit_get_faculties',\n            args: {}\n        }]);\n        return response[0];\n    }\n\n    /**\n     * Fetch statuses from server\n     * @returns {Promise}\n     */\n    async fetchStatuses() {\n        try {\n            const response = await fetchMany([{\n                methodname: 'mod_bookit_get_statuses',\n                args: {}\n            }]);\n            return response[0];\n        } catch (error) {\n            return [];\n        }\n    }\n\n    /**\n     * Load required strings\n     * @returns {Promise}\n     */\n    async loadStrings() {\n        const requiredStrings = [\n            {key: 'filter_search', component: 'mod_bookit'},\n            {key: 'filter_search_placeholder', component: 'mod_bookit'},\n            {key: 'filter_room', component: 'mod_bookit'},\n            {key: 'filter_timeslot', component: 'mod_bookit'},\n            {key: 'filter_faculty', component: 'mod_bookit'},\n            {key: 'filter_status', component: 'mod_bookit'},\n            {key: 'morning', component: 'mod_bookit'},\n            {key: 'afternoon', component: 'mod_bookit'},\n            {key: 'evening', component: 'mod_bookit'},\n            {key: 'all_entries', component: 'mod_bookit'}\n        ];\n\n        const strings = await getStrings(requiredStrings);\n\n        this.strings = {\n            search: strings[0],\n            searchPlaceholder: strings[1],\n            room: strings[2],\n            timeslot: strings[3],\n            faculty: strings[4],\n            status: strings[5],\n            morning: strings[6],\n            afternoon: strings[7],\n            evening: strings[8],\n            select: strings[9]\n        };\n    }\n\n    /**\n     * Render the filter UI\n     * @returns {Promise}\n     */\n    async render() {\n        const templateContext = {\n            strings: this.strings || {},\n            hasAdminAccess: this.hasAdminAccess || false\n        };\n\n        const html = await Templates.render('mod_bookit/filter_ui', templateContext);\n\n        let container = document.querySelector('.filter-container');\n        if (!container) {\n            container = document.createElement('div');\n            container.className = 'filter-container';\n            document.querySelector('#ec')?.insertAdjacentElement('beforebegin', container);\n        }\n\n        container.outerHTML = html;\n    }\n\n    /**\n     * Update filter options\n     * @param {Object} options - Filter options for all filter types\n     */\n    updateOptions(options) {\n        Object.entries(options).forEach(([filterType, values]) => {\n            const select = document.querySelector(`select[name=\"${filterType}\"]`);\n            if (!select) {\n                return;\n            }\n\n            // Clear existing options\n            select.innerHTML = '';\n\n            // Add default option\n            const defaultOption = document.createElement('option');\n            defaultOption.value = '';\n            defaultOption.textContent = this.strings.select || '---';\n            select.appendChild(defaultOption);\n\n            // Add new options\n            if (Array.isArray(values)) {\n                values.forEach(option => {\n                    const optionElement = document.createElement('option');\n                    optionElement.value = option.id || option;\n                    optionElement.textContent = option.name || option;\n                    select.appendChild(optionElement);\n                });\n            }\n        });\n    }\n\n    /**\n     * Attach event listeners to filter elements\n     */\n    attachEventListeners() {\n        // Search input\n        const searchInput = document.querySelector('input[name=\"search\"]');\n        if (searchInput) {\n            searchInput.addEventListener('input', () => {\n                this.dispatchFilterUpdate();\n            });\n        }\n\n        // Select filters\n        ['room', 'timeslot', 'faculty', 'status'].forEach(filterType => {\n            const select = document.querySelector(`select[name=\"${filterType}\"]`);\n            if (select) {\n                select.addEventListener('change', () => {\n                    this.dispatchFilterUpdate();\n                });\n            }\n        });\n    }\n\n    /**\n     * Dispatch filter update event\n     */\n    dispatchFilterUpdate() {\n        const filters = {\n            search: document.querySelector('input[name=\"search\"]')?.value || '',\n            room: document.querySelector('select[name=\"room\"]')?.value || '',\n            timeslot: document.querySelector('select[name=\"timeslot\"]')?.value || '',\n            faculty: document.querySelector('select[name=\"faculty\"]')?.value || '',\n            status: document.querySelector('select[name=\"status\"]')?.value || ''\n        };\n\n        const event = new CustomEvent('filterupdate', {\n            detail: filters\n        });\n        document.dispatchEvent(event);\n    }\n}"],"names":["constructor","strings","filters","search","room","timeslot","faculty","status","hasAdminAccess","this","loadStrings","render","loadFilterData","attachEventListeners","rooms","faculties","statuses","Promise","all","fetchRooms","fetchFaculties","fetchStatuses","timeslots","id","name","morning","afternoon","evening","updateOptions","methodname","args","error","key","component","searchPlaceholder","select","templateContext","html","Templates","container","document","querySelector","createElement","className","insertAdjacentElement","outerHTML","options","Object","entries","forEach","_ref","filterType","values","innerHTML","defaultOption","value","textContent","appendChild","Array","isArray","option","optionElement","searchInput","addEventListener","dispatchFilterUpdate","event","CustomEvent","detail","dispatchEvent"],"mappings":"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"}