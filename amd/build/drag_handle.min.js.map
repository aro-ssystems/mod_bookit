{"version":3,"file":"drag_handle.min.js","sources":["../src/drag_handle.js"],"sourcesContent":["import {BaseComponent, DragDrop} from 'core/reactive';\nimport { masterChecklistReactiveInstance } from 'mod_bookit/master_checklist_reactive';\nimport { SELECTORS } from 'mod_bookit/master_checklist_reactive';\n\nexport default class extends BaseComponent {\n\n    static init(target, selectors) {\n        return new this({\n            element: document.querySelector(target),\n            reactive: masterChecklistReactiveInstance,\n            selectors: selectors || SELECTORS,\n        });\n    }\n\n    stateReady() {\n        this.relativeDrag = true;\n\n        const dragType = this.element.dataset.bookitDragHandleType;\n        const dragId = this.element.dataset.bookitDragHandleId;\n\n        var fullRegionSelector = '';\n\n        switch (dragType) {\n            case 'item':\n                fullRegionSelector = `tr[data-bookit-drag-handle-${dragType}-id=\"${dragId}\"]`;\n                break;\n            case 'category':\n                fullRegionSelector = `tbody[data-bookit-tbody-category-id=\"${dragId}\"]`;\n                break;\n            default:\n                throw new Error(`Unknown drag handle type: ${dragType}`);\n        }\n\n        const fullRegionElement = document.querySelector(fullRegionSelector);\n\n        this.fullregion = fullRegionElement;\n\n        this.dragdrop = new DragDrop(this);\n    }\n\n    destroy() {\n        if (this.dragdrop !== undefined) {\n            this.dragdrop.unregister();\n        }\n    }\n\n    getDraggableData() {\n        const dragType = this.element.dataset.bookitDragHandleType;\n        var parentId = undefined;\n\n        switch (dragType) {\n            case 'item':\n                parentId = this.fullregion.dataset.bookitChecklistitemCategoryid;\n                break;\n            case 'category':\n                parentId = this.fullregion.dataset.bookitCategoryMasterid;\n                break;\n            default:\n                throw new Error(`Unknown drag handle type: ${dragType}`);\n        }\n\n        return {\n            id: this.element.dataset.bookitDragHandleId,\n            type: this.element.dataset.bookitDragHandleType,\n            parentId: parentId,\n        };\n    }\n\n}"],"names":["BaseComponent","target","selectors","this","element","document","querySelector","reactive","masterChecklistReactiveInstance","SELECTORS","stateReady","relativeDrag","dragType","dataset","bookitDragHandleType","dragId","bookitDragHandleId","fullRegionSelector","Error","fullRegionElement","fullregion","dragdrop","DragDrop","destroy","undefined","unregister","getDraggableData","parentId","bookitChecklistitemCategoryid","bookitCategoryMasterid","id","type"],"mappings":"mQAI6BA,oCAEbC,OAAQC,kBACT,IAAIC,KAAK,CACZC,QAASC,SAASC,cAAcL,QAChCM,SAAUC,2DACVN,UAAWA,WAAaO,uCAIhCC,kBACSC,cAAe,QAEdC,SAAWT,KAAKC,QAAQS,QAAQC,qBAChCC,OAASZ,KAAKC,QAAQS,QAAQG,uBAEhCC,mBAAqB,UAEjBL,cACC,OACDK,wDAAmDL,yBAAgBG,uBAElE,WACDE,kEAA6DF,iCAGvD,IAAIG,0CAAmCN,iBAG/CO,kBAAoBd,SAASC,cAAcW,yBAE5CG,WAAaD,uBAEbE,SAAW,IAAIC,mBAASnB,MAGjCoB,eAC0BC,IAAlBrB,KAAKkB,eACAA,SAASI,aAItBC,yBACUd,SAAWT,KAAKC,QAAQS,QAAQC,yBAClCa,cAAWH,SAEPZ,cACC,OACDe,SAAWxB,KAAKiB,WAAWP,QAAQe,wCAElC,WACDD,SAAWxB,KAAKiB,WAAWP,QAAQgB,2CAG7B,IAAIX,0CAAmCN,iBAG9C,CACHkB,GAAI3B,KAAKC,QAAQS,QAAQG,mBACzBe,KAAM5B,KAAKC,QAAQS,QAAQC,qBAC3Ba,SAAUA"}