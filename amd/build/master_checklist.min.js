define("mod_bookit/master_checklist",["exports","core/reactive","mod_bookit/master_checklist_reactive","core/modal_events","core_form/modalform","core/templates","core/toast","core/str","core/ajax"],(function(_exports,_reactive,_master_checklist_reactive,_modal_events,_modalform,_templates,Toast,_str,_ajax){function _getRequireWildcardCache(nodeInterop){if("function"!=typeof WeakMap)return null;var cacheBabelInterop=new WeakMap,cacheNodeInterop=new WeakMap;return(_getRequireWildcardCache=function(nodeInterop){return nodeInterop?cacheNodeInterop:cacheBabelInterop})(nodeInterop)}function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}Object.defineProperty(_exports,"__esModule",{value:!0}),_exports.default=void 0,_modal_events=_interopRequireDefault(_modal_events),_modalform=_interopRequireDefault(_modalform),_templates=_interopRequireDefault(_templates),Toast=function(obj,nodeInterop){if(!nodeInterop&&obj&&obj.__esModule)return obj;if(null===obj||"object"!=typeof obj&&"function"!=typeof obj)return{default:obj};var cache=_getRequireWildcardCache(nodeInterop);if(cache&&cache.has(obj))return cache.get(obj);var newObj={},hasPropertyDescriptor=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var key in obj)if("default"!==key&&Object.prototype.hasOwnProperty.call(obj,key)){var desc=hasPropertyDescriptor?Object.getOwnPropertyDescriptor(obj,key):null;desc&&(desc.get||desc.set)?Object.defineProperty(newObj,key,desc):newObj[key]=obj[key]}newObj.default=obj,cache&&cache.set(obj,newObj);return newObj}(Toast),_ajax=_interopRequireDefault(_ajax);class _default extends _reactive.BaseComponent{static getEvents(){return{categoryRendered:"mod_bookit:master_checklist_category_rendered"}}create(descriptor){window.console.log("create component: "+descriptor.reactive.name),window.console.log("selectors in create master checklist: ",_master_checklist_reactive.SELECTORS)}static init(target,selectors){return new this({element:document.querySelector(target),reactive:_master_checklist_reactive.masterChecklistReactiveInstance,selectors:selectors||_master_checklist_reactive.SELECTORS})}getWatchers(){return window.console.log("GET WATCHERS"),[{watch:"state:updated",handler:this._handleStateEvent},{watch:"checklistcategories:created",handler:this._handleCategoryCreatedEvent},{watch:"checklistcategories:deleted",handler:this._handleCategoryDeletedEvent},{watch:"checklistcategories.name:updated",handler:this._handleCategoryNameUpdatedEvent},{watch:"checklistcategories.items:updated",handler:this._handleCategoryItemsUpdatedEvent},{watch:"checklistitems:created",handler:this._handleItemCreatedEvent},{watch:"checklistitems:deleted",handler:this._handleItemDeletedEvent},{watch:"checklistitems:updated",handler:this._handleItemUpdatedEvent},{watch:"checklistitems.categoryid:updated",handler:this._handleItemCategoryUpdatedEvent},{watch:"checklistitems.title:updated",handler:this._replaceRenderedItem},{watch:"checklistitems.roomid:updated",handler:this._replaceRenderedItem},{watch:"checklistitems.roleid:updated",handler:this._replaceRenderedItem},{watch:"activeRole:updated",handler:this._handleRoleUpdate},{watch:"activeRoom:updated",handler:this._handleRoomUpdate}]}stateReady(state){window.console.log("state ready"),window.console.log(state);const name=state.masterchecklists.get(1).name;window.console.log(this.selectors.MASTER_CHECKLIST_TITLE);const titleElement=this.getElement(this.selectors.MASTER_CHECKLIST_TITLE);window.console.log(titleElement),titleElement.innerHTML=name,this.addEventListener(this.getElement(this.selectors.ADD_CHECKLIST_ITEM_BUTTON),"click",(e=>{e.preventDefault(),window.console.log("ADD CHECKLIST ITEM BUTTON CLICKED"),this._handleAddChecklistItemButtonClick(e)})),this.addEventListener(this.getElement(this.selectors.ADD_CHECKLIST_CATEGORY_BUTTON),"click",(e=>{e.preventDefault(),window.console.log("ADD CHECKLIST CATEGORY BUTTON CLICKED"),this._handleAddChecklistCategoryButtonClick(e)})),this.addEventListener(this.getElement(this.selectors.ROLE_SELECT),"change",(e=>{window.console.log("ROLE SELECT CHANGE",e),this.reactive.dispatch("roleChanged",{id:e.target.value})})),this.addEventListener(this.getElement(this.selectors.ROOM_SELECT),"change",(e=>{window.console.log("ROOM SELECT CHANGE",e),this.reactive.dispatch("roomChanged",{id:e.target.value})}))}_handleStateEvent(event){}async _handleAddChecklistItemButtonClick(event){window.console.log("handle add checklist item button click"),window.console.log(Array.from(this.reactive.state.checklistcategories.values()));const modalForm=new _modalform.default({formClass:"mod_bookit\\form\\edit_checklistitem_form",args:{masterid:1,itemid:null,categories:Array.from(this.reactive.state.checklistcategories.values())},modalConfig:{title:await(0,_str.getString)("checklistitem","mod_bookit")}});modalForm.addEventListener(modalForm.events.FORM_SUBMITTED,(response=>{this.reactive.dispatch("checklistitemCreated",response.detail)})),modalForm.show()}async _handleAddChecklistCategoryButtonClick(event){window.console.log("handle add checklist category button click");const modalForm=new _modalform.default({formClass:"mod_bookit\\form\\edit_checklist_category_form",args:{masterid:1},modalConfig:{title:await(0,_str.getString)("checklistcategory","mod_bookit")}});modalForm.addEventListener(modalForm.events.FORM_SUBMITTED,(response=>{this.reactive.stateManager.processUpdates(response.detail)})),modalForm.addEventListener(modalForm.events.NOSUBMIT_BUTTON_PRESSED,(response=>{window.console.log("no submit button pressed"),window.console.log(response)})),modalForm.show()}_handleCategoryCreatedEvent(event){window.console.log("handle category created event",event),_templates.default.renderForPromise("mod_bookit/bookit_checklist_category",{id:event.element.id,name:event.element.name,order:event.element.order,masterid:1,type:"category"}).then((_ref=>{let{html:html,js:js}=_ref;_templates.default.appendNodeContents(this.getElement(this.selectors.TABLE),html,js)})).then((async()=>{Toast.add(await(0,_str.getString)("checklistcategorysuccess","mod_bookit"),{type:"success"})})).catch()}_handleItemCreatedEvent(event){window.console.log("handle item created event");const targetElement=this.getElement("#bookit-master-checklist-tbody-category-".concat(event.element.category));window.console.log("event: ",event),_templates.default.renderForPromise("mod_bookit/bookit_checklist_item",{id:event.element.id,title:event.element.title,order:event.element.order,categoryid:event.element.category,roomid:event.element.roomid,roomname:event.element.roomname,roleid:event.element.roleid,rolename:event.element.rolename,type:"item"}).then((_ref2=>{let{html:html,js:js}=_ref2;_templates.default.appendNodeContents(targetElement,html,js)})).then((async()=>{Toast.add(await(0,_str.getString)("checklistitemsuccess","mod_bookit"),{type:"success"})})).catch((error=>{window.console.error("Error rendering checklist item:",error)}))}_handleItemDeletedEvent(event){window.console.log("handle item deleted event"),window.console.log(event);this.getElement("#bookit-master-checklist-item-".concat(event.element.id)).remove(),Toast.add((0,_str.getString)("checklistitemdeleted","mod_bookit",{title:event.element.title}),{type:"success"})}_handleItemUpdatedEvent(event){window.console.log("handle item updated event"),window.console.log(event)}_replaceRenderedItem(event){window.console.log("replace rendered item"),window.console.log(event.action);const fieldPart=event.action.split(".")[1].split(":")[0],elementSelector="td[data-bookit-checklistitem-tabledata-".concat(fieldPart,'-id="').concat(event.element.id,'"]');window.console.log("elementSelector",elementSelector);const targetElement=this.getElement(elementSelector);if(window.console.log("targetElement",targetElement),fieldPart.endsWith("id")){const nameField=fieldPart.substring(0,fieldPart.length-2)+"name";nameField in event.element&&(targetElement.innerHTML=event.element[nameField])}else targetElement.innerHTML=event.element[fieldPart]}_handleItemCategoryUpdatedEvent(event){window.console.log("handle checklistitem category updated event"),window.console.log(event);const itemObject=this.reactive.state.checklistitems.get(event.element.id),formDataObj={itemid:itemObject.id,masterid:1,title:itemObject.title,categoryid:itemObject.categoryid,roomid:itemObject.roomid,roleid:itemObject.roleid,action:"put",_qf__mod_bookit_form_edit_checklistitem_form:1},formData=new URLSearchParams(formDataObj).toString();window.console.log("formData ITEM",formData),_ajax.default.call([{methodname:"core_form_dynamic_form",args:{formdata:formData,form:"mod_bookit\\form\\edit_checklistitem_form"}}])[0].then((response=>{window.console.log("AJAX response received"),window.console.log(response)})).catch((exception=>{window.console.error("AJAX error:",exception)}))}_handleCategoryDeletedEvent(event){window.console.log("handle category deleted event"),window.console.log(event);this.getElement("#bookit-master-checklist-tbody-category-".concat(event.element.id)).remove(),Toast.add((0,_str.getString)("checklistcategorydeleted","mod_bookit",{name:event.element.name}),{type:"success"})}_handleCategoryNameUpdatedEvent(event){window.console.log("handle category name updated event"),window.console.log(event);const targetElement=this.getElement("#bookit-master-checklist-category-row-".concat(event.element.id));window.console.log("target element",targetElement),_templates.default.renderForPromise("mod_bookit/bookit_checklist_category_row",{id:event.element.id,name:event.element.name,order:event.element.order}).then((_ref3=>{let{html:html,js:js}=_ref3;_templates.default.replaceNode(targetElement,html,js)})).then((async()=>{Toast.add(await(0,_str.getString)("checklistcategoryupdatesuccess","mod_bookit"),{type:"success"}),this.dispatchEvent(this.events.categoryRendered,{categoryId:event.element.id})})).catch((error=>{window.console.error("Error rendering checklist category:",error)}))}_handleCategoryItemsUpdatedEvent(event){window.console.log("handle category checklistitems updated event"),window.console.log(event);const targetElement=this.getElement("#bookit-master-checklist-tbody-category-".concat(event.element.id));window.console.log("target element",targetElement);const category=this.reactive.state.checklistcategories.get(event.element.id);window.console.log("category in _handleCategoryItemUpdatedEvent",category);const formDataObj={id:category.id,masterid:1,name:category.name,checklistitems:category.items,action:"put",_qf__mod_bookit_form_edit_checklist_category_form:1},formData=new URLSearchParams(formDataObj).toString();window.console.log("formData",formData),_ajax.default.call([{methodname:"core_form_dynamic_form",args:{formdata:formData,form:"mod_bookit\\form\\edit_checklist_category_form"}}])[0].then((response=>{window.console.log("AJAX response received"),window.console.log(response)})).catch((exception=>{window.console.error("AJAX error:",exception)}))}_handleRoleUpdate(event){window.console.log("handle role update"),window.console.log(event);document.querySelectorAll(this.selectors.ALL_CATEGORY_TABLE_ROWS).forEach((categoryElement=>{window.console.log("categoryElement",categoryElement);const category=this.reactive.state.checklistcategories.get(categoryElement.dataset.bookitCategoryId);window.console.log("category",category);const items=[...category.items];window.console.log("items",items);var hasVisibleItems=!1;const activeRoom=this.reactive.state.activeRoom.id;items.forEach((itemId=>{window.console.log("itemId",itemId);const itemElement=document.querySelector('tr[data-bookit-checklistitem-id="'.concat(itemId,'"]'));window.console.log("itemElement",itemElement),window.console.log("activeRoom",activeRoom),0===activeRoom?(window.console.log("activeRoom is 0, showing all items"),parseInt(itemElement.dataset.bookitChecklistitemRole)===event.element.id?(itemElement.classList.remove("d-none"),hasVisibleItems||(hasVisibleItems=!0)):itemElement.classList.add("d-none")):activeRoom===parseInt(itemElement.dataset.bookitChecklistitemRoom)?(window.console.log("activeRoom matches item room, checking role"),parseInt(itemElement.dataset.bookitChecklistitemRole)===event.element.id?(itemElement.classList.remove("d-none"),hasVisibleItems||(hasVisibleItems=!0)):itemElement.classList.add("d-none")):(window.console.log("activeRoom does not match item room, hiding item"),itemElement.classList.add("d-none"))})),hasVisibleItems?categoryElement.classList.remove("d-none"):categoryElement.classList.add("d-none")}))}_handleRoomUpdate(event){window.console.log("handle room update"),window.console.log(event);document.querySelectorAll(this.selectors.ALL_CATEGORY_TABLE_ROWS).forEach((categoryElement=>{window.console.log("categoryElement",categoryElement);const category=this.reactive.state.checklistcategories.get(categoryElement.dataset.bookitCategoryId);window.console.log("category",category);const items=[...category.items];window.console.log("items",items);var hasVisibleItems=!1;const activeRole=this.reactive.state.activeRole.id;items.forEach((itemId=>{window.console.log("itemId",itemId);const itemElement=document.querySelector('tr[data-bookit-checklistitem-id="'.concat(itemId,'"]'));window.console.log("itemElement",itemElement),parseInt(itemElement.dataset.bookitChecklistitemRoom)===event.element.id?0===activeRole||parseInt(itemElement.dataset.bookitChecklistitemRole)===activeRole?(itemElement.classList.remove("d-none"),hasVisibleItems||(hasVisibleItems=!0)):itemElement.classList.add("d-none"):0===event.element.id&&parseInt(itemElement.dataset.bookitChecklistitemRole)===activeRole?(itemElement.classList.remove("d-none"),hasVisibleItems||(hasVisibleItems=!0)):itemElement.classList.add("d-none")})),hasVisibleItems?categoryElement.classList.remove("d-none"):categoryElement.classList.add("d-none")}))}}return _exports.default=_default,_exports.default}));

//# sourceMappingURL=master_checklist.min.js.map