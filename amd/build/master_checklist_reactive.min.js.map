{"version":3,"file":"master_checklist_reactive.min.js","sources":["../src/master_checklist_reactive.js"],"sourcesContent":["import { Reactive } from 'core/reactive';\nimport Mutations from 'mod_bookit/master_checklist_mutations';\n\nexport const SELECTORS = {\n            TABLE: '#mod-bookit-master-checklist-table',\n            MAIN_ELEMENT: '#mod-bookit-master-checklist',\n            LOADING_SPINNER: '#mod-bookit-master-checklist-spinner',\n            ADD_CHECKLIST_CATEGORY_BUTTON: '#add-checklist-category-button',\n            ADD_CHECKLIST_ITEM_BUTTON: '#add-checklist-item-button',\n            MASTER_CHECKLIST_TITLE: '#mod-bookit-master-checklist-title',\n            ALL_CATEGORY_TABLE_ROWS: 'tr[data-bookit-category-id]',\n            ALL_ITEM_TABLE_ROWS: 'tr[data-bookit-checklistitem-id]',\n            TABLE_BODY: '#mod-bookit-master-checklist-tbody',\n            ALL_ROLE_OPTIONS: 'option[data-bookit-roleoption]',\n            ALL_ROOM_OPTIONS: 'option[data-bookit-roomoption]',\n            ROLE_SELECT: '#bookit-master-role-select',\n            ROOM_SELECT: '#bookit-master-room-select',\n        };\n\n\nconst EVENTNAME = 'mod_bookit:master_checklist_state_event'\n\nexport const masterChecklistReactiveInstance = new Reactive({\n        eventName: EVENTNAME,\n        eventDispatch: dispatchMasterChecklistStateEvent,\n        mutations: new Mutations(),\n        name: 'Moodle Bookit Master Checklist',\n    });\n\nexport const init = (elementId) => {\n\n    loadState(masterChecklistReactiveInstance);\n}\n\nfunction dispatchMasterChecklistStateEvent(detail, target) {\n\n    window.console.log('dispatch master checklist state event function');\n    if (target === undefined) {\n        target = document;\n    }\n    target.dispatchEvent(\n        new CustomEvent(\n            EVENTNAME,\n            {\n                bubbles: true,\n                detail: detail,\n            }\n        )\n    );\n}\n\n/**\n * Load the initial state.\n *\n * This iterates over the initial tree of category items, and captures the data required for the state from each category.\n * It also captures a count of the number of children in each list.\n *\n * @param {Reactive} reactive\n * @return {Promise<void>}\n */\nconst loadState = async(reactive) => {\n\n    window.console.log('loading state');\n\n    const tableElement = document.querySelector(SELECTORS.TABLE);\n\n    const stateData = {\n        masterchecklists: [{\n            id: tableElement.dataset.masterChecklistId,\n            name: tableElement.dataset.masterChecklistName,\n            mastercategoryorder: tableElement.dataset.masterChecklistCategoryorder,\n        }],\n        activechecklist: {\n            id: tableElement.dataset.masterChecklistId,\n        },\n        checklistcategories: [],\n        checklistitems: [],\n        roles: [],\n        rooms: [],\n        activeRole: {\n            id: 0,\n        },\n        activeRoom: {\n            id: 0,\n        },\n    };\n    const checklistCategoryRows = document.querySelectorAll(SELECTORS.ALL_CATEGORY_TABLE_ROWS);\n    checklistCategoryRows.forEach(categoryRow => {\n\n        const categoryItemRows = document.querySelectorAll(`tr[data-bookit-checklistitem-categoryid=\"${categoryRow.dataset.bookitCategoryId}\"]`);\n\n        const checklistItems = [];\n        categoryItemRows.forEach(itemRow => {\n            checklistItems.push(parseInt(itemRow.dataset.bookitChecklistitemId))\n        });\n\n        stateData.checklistcategories.push({\n            id: categoryRow.dataset.bookitCategoryId,\n            name: categoryRow.dataset.bookitCategoryName,\n            order: categoryRow.dataset.bookitCategoryOrder,\n            items: checklistItems\n        });\n    });\n\n    const checklistItemRows = document.querySelectorAll(SELECTORS.ALL_ITEM_TABLE_ROWS);\n    checklistItemRows.forEach(itemRow => {\n        const roomElements = itemRow.querySelectorAll('span[data-bookit-checklistitem-tabledata-room-id]');\n        const roleElements = itemRow.querySelectorAll('span[data-bookit-checklistitem-tabledata-role-id]');\n\n        const roomNames = [];\n        roomElements.forEach(roomElement => {\n            roomNames.push({\n                'roomid': roomElement.dataset.bookitChecklistitemTabledataRoomId,\n                'roomname': roomElement.dataset.bookitChecklistitemRoomname\n            });\n        });\n\n        const roleNames = [];\n        roleElements.forEach(roleElement => {\n            roleNames.push({\n                'roleid': roleElement.dataset.bookitChecklistitemTabledataRoleId,\n                'rolename': roleElement.dataset.bookitChecklistitemRolename\n            });\n        });\n\n        stateData.checklistitems.push({\n            id: itemRow.dataset.bookitChecklistitemId,\n            title: itemRow.dataset.bookitChecklistitemTitle,\n            order: itemRow.dataset.bookitChecklistitemOrder,\n            categoryid: itemRow.dataset.bookitChecklistitemCategoryid,\n            roomids: itemRow.dataset.bookitChecklistitemRoomids,\n            roomnames: roomNames,\n            roleids: itemRow.dataset.bookitChecklistitemRoleids,\n            rolenames: roleNames,\n        });\n    });\n\n    // Get all room options\n    const roomOptions = document.querySelectorAll(SELECTORS.ALL_ROOM_OPTIONS);\n    roomOptions.forEach(roomOption => {\n        stateData.rooms.push({\n            id: roomOption.value,\n            name: roomOption.dataset.bookitRoomname\n        });\n    });\n\n    // Get all role options\n    const roleOptions = document.querySelectorAll(SELECTORS.ALL_ROLE_OPTIONS);\n    roleOptions.forEach(roleOption => {\n        stateData.roles.push({\n            id: roleOption.value,\n            name: roleOption.dataset.bookitRolename\n        });\n    });\n\n    reactive.setInitialState(stateData);\n};"],"names":["SELECTORS","TABLE","MAIN_ELEMENT","LOADING_SPINNER","ADD_CHECKLIST_CATEGORY_BUTTON","ADD_CHECKLIST_ITEM_BUTTON","MASTER_CHECKLIST_TITLE","ALL_CATEGORY_TABLE_ROWS","ALL_ITEM_TABLE_ROWS","TABLE_BODY","ALL_ROLE_OPTIONS","ALL_ROOM_OPTIONS","ROLE_SELECT","ROOM_SELECT","EVENTNAME","masterChecklistReactiveInstance","Reactive","eventName","eventDispatch","detail","target","window","console","log","undefined","document","dispatchEvent","CustomEvent","bubbles","mutations","Mutations","name","elementId","loadState","async","tableElement","querySelector","stateData","masterchecklists","id","dataset","masterChecklistId","masterChecklistName","mastercategoryorder","masterChecklistCategoryorder","activechecklist","checklistcategories","checklistitems","roles","rooms","activeRole","activeRoom","querySelectorAll","forEach","categoryRow","categoryItemRows","bookitCategoryId","checklistItems","itemRow","push","parseInt","bookitChecklistitemId","bookitCategoryName","order","bookitCategoryOrder","items","roomElements","roleElements","roomNames","roomElement","bookitChecklistitemTabledataRoomId","bookitChecklistitemRoomname","roleNames","roleElement","bookitChecklistitemTabledataRoleId","bookitChecklistitemRolename","title","bookitChecklistitemTitle","bookitChecklistitemOrder","categoryid","bookitChecklistitemCategoryid","roomids","bookitChecklistitemRoomids","roomnames","roleids","bookitChecklistitemRoleids","rolenames","roomOption","value","bookitRoomname","roleOption","bookitRolename","reactive","setInitialState"],"mappings":"maAGaA,UAAY,CACbC,MAAO,qCACPC,aAAc,+BACdC,gBAAiB,uCACjBC,8BAA+B,iCAC/BC,0BAA2B,6BAC3BC,uBAAwB,qCACxBC,wBAAyB,8BACzBC,oBAAqB,mCACrBC,WAAY,qCACZC,iBAAkB,iCAClBC,iBAAkB,iCAClBC,YAAa,6BACbC,YAAa,iEAInBC,UAAY,0CAELC,gCAAkC,IAAIC,mBAAS,CACpDC,UAAWH,UACXI,uBAUmCC,OAAQC,QAE/CC,OAAOC,QAAQC,IAAI,uDACJC,IAAXJ,SACAA,OAASK,UAEbL,OAAOM,cACH,IAAIC,YACAb,UACA,CACIc,SAAS,EACTT,OAAQA,WApBhBU,UAAW,IAAIC,oCACfC,KAAM,0HAGOC,YAEjBC,UAAUlB,wCA6BRkB,UAAYC,MAAAA,WAEdb,OAAOC,QAAQC,IAAI,uBAEbY,aAAeV,SAASW,cAAcpC,UAAUC,OAEhDoC,UAAY,CACdC,iBAAkB,CAAC,CACfC,GAAIJ,aAAaK,QAAQC,kBACzBV,KAAMI,aAAaK,QAAQE,oBAC3BC,oBAAqBR,aAAaK,QAAQI,+BAE9CC,gBAAiB,CACbN,GAAIJ,aAAaK,QAAQC,mBAE7BK,oBAAqB,GACrBC,eAAgB,GAChBC,MAAO,GACPC,MAAO,GACPC,WAAY,CACRX,GAAI,GAERY,WAAY,CACRZ,GAAI,IAGkBd,SAAS2B,iBAAiBpD,UAAUO,yBAC5C8C,SAAQC,oBAEpBC,iBAAmB9B,SAAS2B,oEAA6DE,YAAYd,QAAQgB,wBAE7GC,eAAiB,GACvBF,iBAAiBF,SAAQK,UACrBD,eAAeE,KAAKC,SAASF,QAAQlB,QAAQqB,2BAGjDxB,UAAUS,oBAAoBa,KAAK,CAC/BpB,GAAIe,YAAYd,QAAQgB,iBACxBzB,KAAMuB,YAAYd,QAAQsB,mBAC1BC,MAAOT,YAAYd,QAAQwB,oBAC3BC,MAAOR,oBAIWhC,SAAS2B,iBAAiBpD,UAAUQ,qBAC5C6C,SAAQK,gBAChBQ,aAAeR,QAAQN,iBAAiB,qDACxCe,aAAeT,QAAQN,iBAAiB,qDAExCgB,UAAY,GAClBF,aAAab,SAAQgB,cACjBD,UAAUT,KAAK,QACDU,YAAY7B,QAAQ8B,4CAClBD,YAAY7B,QAAQ+B,uCAIlCC,UAAY,GAClBL,aAAad,SAAQoB,cACjBD,UAAUb,KAAK,QACDc,YAAYjC,QAAQkC,4CAClBD,YAAYjC,QAAQmC,iCAIxCtC,UAAUU,eAAeY,KAAK,CAC1BpB,GAAImB,QAAQlB,QAAQqB,sBACpBe,MAAOlB,QAAQlB,QAAQqC,yBACvBd,MAAOL,QAAQlB,QAAQsC,yBACvBC,WAAYrB,QAAQlB,QAAQwC,8BAC5BC,QAASvB,QAAQlB,QAAQ0C,2BACzBC,UAAWf,UACXgB,QAAS1B,QAAQlB,QAAQ6C,2BACzBC,UAAWd,eAKC/C,SAAS2B,iBAAiBpD,UAAUW,kBAC5C0C,SAAQkC,aAChBlD,UAAUY,MAAMU,KAAK,CACjBpB,GAAIgD,WAAWC,MACfzD,KAAMwD,WAAW/C,QAAQiD,oBAKbhE,SAAS2B,iBAAiBpD,UAAUU,kBAC5C2C,SAAQqC,aAChBrD,UAAUW,MAAMW,KAAK,CACjBpB,GAAImD,WAAWF,MACfzD,KAAM2D,WAAWlD,QAAQmD,oBAIjCC,SAASC,gBAAgBxD"}