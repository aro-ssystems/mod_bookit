define("mod_bookit/master_checklist_item",["exports","core/reactive","mod_bookit/master_checklist_reactive","core_form/modalform","core/templates","core/str"],(function(_exports,_reactive,_master_checklist_reactive,_modalform,_templates,_str){function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}Object.defineProperty(_exports,"__esModule",{value:!0}),_exports.default=void 0,_modalform=_interopRequireDefault(_modalform),_templates=_interopRequireDefault(_templates);class _default extends _reactive.BaseComponent{create(descriptor){window.console.log("create item component: "+descriptor.element.dataset.bookitChecklistitemName);const itemEditBtnSelector="EDIT_CHECKLISTITEM_BTN_"+descriptor.element.dataset.bookitChecklistitemId;this.selectors[itemEditBtnSelector]="#edit-checklistitem-".concat(descriptor.element.dataset.bookitChecklistitemId)}static init(target,selectors){return new this({element:document.querySelector(target),reactive:_master_checklist_reactive.masterChecklistReactiveInstance,selectors:selectors||_master_checklist_reactive.SELECTORS})}getWatchers(){return[{watch:"state:updated",handler:this._handleStateEvent}]}stateReady(state){window.console.log(this.selectors);const itemEditBtnSelector="EDIT_CHECKLISTITEM_BTN_"+this.element.dataset.bookitChecklistitemId;this.addEventListener(this.getElement(this.selectors[itemEditBtnSelector]),"click",(e=>{e.preventDefault(),window.console.log("EDIT CHECKLIST ITEM BUTTON CLICKED",e.currentTarget),this._handleEditChecklistItemButtonClick(e)}))}_handleStateEvent(event){}async _handleEditChecklistItemButtonClick(event){window.console.log("handle edit checklist item button click"),window.console.log(event);const modalForm=new _modalform.default({formClass:"mod_bookit\\form\\edit_checklistitem_form",moduleName:"mod_bookit/modal_delete_save_cancel",args:{masterid:1,itemid:event.currentTarget.value,categories:Array.from(this.reactive.state.checklistcategories.values())},modalConfig:{title:await(0,_str.getString)("checklistitem","mod_bookit")}});modalForm.addEventListener(modalForm.events.FORM_SUBMITTED,(response=>{this.reactive.stateManager.processUpdates(response.detail)})),modalForm.addEventListener(modalForm.events.NOSUBMIT_BUTTON_PRESSED,(response=>{window.console.log("no submit button pressed"),window.console.log(response)})),modalForm.addEventListener(modalForm.events.FORM_CANCELLED,(response=>{window.console.log("FORM CANCELLED"),window.console.log(response)})),modalForm.addEventListener(modalForm.events.ERROR,(response=>{window.console.log("FORM ERROR"),window.console.log(response)})),modalForm.addEventListener(modalForm.events.CANCEL_BUTTON_PRESSED,(response=>{window.console.log("CANCEL BUTTON PRESSED"),window.console.log(response)})),modalForm.addEventListener(modalForm.events.LOADED,(response=>{window.console.log("FORM LOADED"),window.console.log(response);const deleteButton=modalForm.modal.getRoot().find('button[data-action="delete"]');window.console.log("DELETE BUTTON",deleteButton),deleteButton.on("click",(async e=>{window.console.log("DELETE CHECKLIST ITEM BUTTON CLICKED",e.currentTarget),window.console.log("DELETE ITEM "+this.element.dataset.bookitChecklistitemId);const deleteInput=document.createElement("input");deleteInput.type="hidden",deleteInput.name="delete",deleteInput.value="1",modalForm.getFormNode().appendChild(deleteInput),await modalForm.submitFormAjax()}))})),modalForm.show()}}return _exports.default=_default,_exports.default}));

//# sourceMappingURL=master_checklist_item.min.js.map